
DECLARE PROC test (i INTEGER NOT NULL);
DECLARE PROC proc_with_return_guard (a INTEGER);
DECLARE PROC out_test (OUT i INTEGER NOT NULL, OUT ii INTEGER);
DECLARE PROC outparm_test (OUT foo INTEGER NOT NULL) USING TRANSACTION;
DECLARE PROC throwing () USING TRANSACTION;
DECLARE PROC with_result_set () (id INTEGER NOT NULL, name TEXT, rate LONG_INT, type INTEGER, size REAL);
DECLARE PROC select_from_view () (id INTEGER NOT NULL, type INTEGER);
DECLARE PROC make_view () USING TRANSACTION;
DECLARE PROC make_index () USING TRANSACTION;
DECLARE PROC get_data (name_ TEXT NOT NULL, id_ INTEGER NOT NULL) (id INTEGER NOT NULL, name TEXT, rate LONG_INT, type INTEGER, size REAL);
DECLARE PROC easy_fetch () USING TRANSACTION;
DECLARE PROC copy_int (a INTEGER, OUT b INTEGER);
DECLARE PROC insert_rowid_reader () USING TRANSACTION;
DECLARE PROC changes_reader () USING TRANSACTION;
DECLARE PROC xyzzy_test () USING TRANSACTION;
DECLARE PROC complex_return () (_bool BOOL NOT NULL, _integer INTEGER NOT NULL, _longint LONG_INT NOT NULL, _real REAL NOT NULL, _text TEXT NOT NULL, _nullable_bool BOOL);
DECLARE PROC hierarchical_query (rate_ LONG_INT NOT NULL, limit_ INTEGER NOT NULL, offset_ INTEGER NOT NULL) (id INTEGER NOT NULL);
DECLARE PROC hierarchical_unmatched_query (rate_ LONG_INT NOT NULL, limit_ INTEGER NOT NULL, offset_ INTEGER NOT NULL) (id INTEGER NOT NULL);
DECLARE PROC union_select () (A INTEGER NOT NULL);
DECLARE PROC union_all_select () (A INTEGER NOT NULL);
DECLARE PROC union_all_with_nullable () (name TEXT);
DECLARE PROC with_stmt_using_cursor () USING TRANSACTION;
DECLARE PROC with_stmt () (a INTEGER NOT NULL, b INTEGER NOT NULL, c INTEGER NOT NULL);
DECLARE PROC with_recursive_stmt () (a INTEGER NOT NULL, b INTEGER NOT NULL, c INTEGER NOT NULL);
DECLARE PROC parent_proc () (one INTEGER NOT NULL, two INTEGER NOT NULL, three INTEGER NOT NULL);
DECLARE PROC parent_proc_child () (four INTEGER NOT NULL, five INTEGER NOT NULL, six INTEGER NOT NULL);
DECLARE PROC outint_nullable (OUT output INTEGER, OUT result BOOL NOT NULL) USING TRANSACTION;
DECLARE PROC outint_notnull (OUT output INTEGER NOT NULL, OUT result BOOL NOT NULL) USING TRANSACTION;
DECLARE PROC obj_proc (OUT an_object OBJECT);
DECLARE PROC cursor_with_object (object_ OBJECT) OUT (object_ OBJECT);
DECLARE PROC unused_temp (i INTEGER, OUT o INTEGER NOT NULL);
DECLARE PROC echo_test ();
DECLARE PROC insert_values (id_ INTEGER NOT NULL, type_ INTEGER) USING TRANSACTION;
DECLARE PROC alter_table_test () USING TRANSACTION;
DECLARE PROC drop_table_test () USING TRANSACTION;
DECLARE PROC uses_proc_for_result () (id INTEGER NOT NULL, name TEXT, rate LONG_INT, type INTEGER, size REAL);
DECLARE PROC index_dropper () USING TRANSACTION;
DECLARE PROC misc_dml_proc () USING TRANSACTION;
DECLARE PROC dummy_user () USING TRANSACTION;
DECLARE PROC proc_with_out_arg (OUT foo TEXT);
DECLARE PROC calls_out_proc (OUT foo TEXT);
DECLARE PROC blob_proc (OUT a_blob BLOB);
DECLARE PROC blob_returner () (blob_id INTEGER NOT NULL, b_notnull BLOB NOT NULL, b_nullable BLOB);
DECLARE PROC voidproc ();
DECLARE PROC out_cursor_proc () OUT (id INTEGER NOT NULL, name TEXT, rate LONG_INT, type INTEGER, size REAL, extra1 TEXT NOT NULL, extra2 TEXT NOT NULL) USING TRANSACTION;
DECLARE PROC read_cursor_proc () USING TRANSACTION;
DECLARE PROC declare_cursor_then_fetch_from_proc () USING TRANSACTION;
DECLARE PROC dml_user (OUT a_ INTEGER NOT NULL) USING TRANSACTION;
DECLARE PROC thread_theme_info_list (thread_key_ LONG_INT NOT NULL) (thread_key LONG_INT NOT NULL);
DECLARE PROC fetch_values_dummy ();
DECLARE PROC c_literal (OUT x TEXT);
DECLARE PROC no_cleanup_label_needed_proc () USING TRANSACTION;
DECLARE PROC no_code_after_catch () USING TRANSACTION;
DECLARE PROC out_no_db () OUT (A INTEGER NOT NULL, B REAL NOT NULL);
DECLARE PROC declare_cursor_like_cursor () OUT (A INTEGER NOT NULL, B REAL NOT NULL);
DECLARE PROC declare_cursor_like_proc () OUT (a INTEGER, b TEXT);
DECLARE PROC declare_cursor_like_table () OUT (id INTEGER NOT NULL, name TEXT, rate LONG_INT, type INTEGER, size REAL);
DECLARE PROC declare_cursor_like_view () OUT (f1 INTEGER NOT NULL, f2 INTEGER NOT NULL, f3 INTEGER NOT NULL);
DECLARE PROC weird_quoting () USING TRANSACTION;
DECLARE PROC long_auto_table_maker () USING TRANSACTION;
DECLARE PROC blob_call1 ();
DECLARE PROC blob_call2 ();
DECLARE PROC blob_no_else ();
DECLARE PROC with_inserter () USING TRANSACTION;
DECLARE PROC multi_rewrite (blob_id_ INTEGER NOT NULL, b_notnull_ BLOB NOT NULL, b_nullable_ BLOB, id_ INTEGER NOT NULL, name_ TEXT, rate_ LONG_INT, type_ INTEGER, size_ REAL, OUT out_arg INTEGER NOT NULL) USING TRANSACTION;
DECLARE PROC fetch_to_cursor_from_cursor () OUT (A INTEGER NOT NULL, B TEXT NOT NULL);
DECLARE PROC loop_statement_cursor () USING TRANSACTION;
DECLARE PROC loop_statement_not_auto_cursor () USING TRANSACTION;
DECLARE PROC simple_select () (x INTEGER NOT NULL);
DECLARE PROC call_in_loop () USING TRANSACTION;
DECLARE PROC call_in_loop_boxed () USING TRANSACTION;
DECLARE PROC out_union_helper () OUT UNION (x INTEGER NOT NULL);
DECLARE PROC out_union_dml_helper () OUT UNION (x INTEGER NOT NULL) USING TRANSACTION;
DECLARE PROC call_out_union_in_loop () USING TRANSACTION;
DECLARE PROC forward_out_union () OUT UNION (x INTEGER NOT NULL);
DECLARE PROC forward_out_union_extern () OUT UNION (x INTEGER NOT NULL);
DECLARE PROC forward_out_union_dml () OUT UNION (x INTEGER NOT NULL) USING TRANSACTION;
DECLARE PROC make_trigger () USING TRANSACTION;
DECLARE PROC is_test ();
DECLARE PROC is_blob ();
DECLARE PROC is_not_test ();
DECLARE PROC in_test (x INTEGER, OUT b BOOL);
DECLARE PROC not_in_test (x INTEGER, OUT b BOOL);
DECLARE PROC drop_trigger_test () USING TRANSACTION;
DECLARE PROC simple_identity () (id INTEGER NOT NULL, data INTEGER NOT NULL);
DECLARE PROC complex_identity () (col1 INTEGER NOT NULL, col2 INTEGER NOT NULL, data INTEGER NOT NULL);
DECLARE PROC out_cursor_identity () OUT (id INTEGER NOT NULL, data INTEGER NOT NULL) USING TRANSACTION;
DECLARE PROC radioactive_proc () (id INTEGER NOT NULL, data TEXT @SENSITIVE);
DECLARE PROC with_deleter () USING TRANSACTION;
DECLARE PROC with_updater () USING TRANSACTION;
DECLARE PROC autodropper () (a INTEGER NOT NULL, b INTEGER NOT NULL);
DECLARE PROC simple_cursor_proc () OUT (id INTEGER NOT NULL);
DECLARE PROC redundant_cast () (plugh INTEGER NOT NULL, five INTEGER NOT NULL);
DECLARE PROC view_creator () USING TRANSACTION;
DECLARE PROC settings_info () USING TRANSACTION;
DECLARE PROC use_with_select () USING TRANSACTION;
DECLARE PROC rowset_object_reader (rowset OBJECT<rowset>) USING TRANSACTION;
DECLARE PROC upsert_do_something () USING TRANSACTION;
DECLARE PROC with_upsert_form () USING TRANSACTION;
DECLARE PROC upsert_do_nothing (id_ INTEGER NOT NULL) USING TRANSACTION;
DECLARE PROC use_many_out_cursors () USING TRANSACTION;
DECLARE PROC fetch_many_times (arg BOOL NOT NULL) USING TRANSACTION;
DECLARE PROC out_union_two () OUT UNION (x INTEGER NOT NULL, y TEXT NOT NULL);
DECLARE PROC out_union_reader () USING TRANSACTION;
DECLARE PROC out_union_from_select () OUT UNION (x INTEGER NOT NULL, y TEXT NOT NULL) USING TRANSACTION;
DECLARE PROC out_union_dml_reader () USING TRANSACTION;
DECLARE PROC out_union_values (a INTEGER NOT NULL, b INTEGER NOT NULL) OUT UNION (x INTEGER NOT NULL, y INTEGER NOT NULL);
DECLARE PROC read_out_union_values (a INTEGER NOT NULL, b INTEGER NOT NULL) USING TRANSACTION;
DECLARE PROC out_union_dml () OUT UNION (id INTEGER NOT NULL, data TEXT @SENSITIVE) USING TRANSACTION;
DECLARE PROC out_union_dml_for_call () USING TRANSACTION;
DECLARE PROC compound_select_expr () USING TRANSACTION;
DECLARE PROC window_function_invocation () (id INTEGER NOT NULL, row_num INTEGER NOT NULL);
DECLARE PROC update_cursor () USING TRANSACTION;
DECLARE PROC use_return () (x INTEGER NOT NULL);
DECLARE PROC use_return_no_error_flow ();
DECLARE PROC empty_proc ();
DECLARE PROC empty_blocks () USING TRANSACTION;
DECLARE PROC tail_catch () USING TRANSACTION;
DECLARE PROC pretty_print_with_quote () USING TRANSACTION;
DECLARE PROC hex_quote () USING TRANSACTION;
DECLARE PROC lotsa_columns_no_getters () (id INTEGER NOT NULL, name TEXT, rate LONG_INT, type INTEGER, size REAL);
DECLARE PROC sproc_with_copy () (id INTEGER NOT NULL, name TEXT, rate LONG_INT, type INTEGER, size REAL);
DECLARE PROC emit_object_with_setters (o OBJECT NOT NULL, x OBJECT NOT NULL, i INTEGER NOT NULL, l LONG_INT NOT NULL, b BOOL NOT NULL, d REAL NOT NULL, t TEXT NOT NULL, bl BLOB NOT NULL) OUT (o OBJECT NOT NULL, x OBJECT NOT NULL, i INTEGER NOT NULL, l LONG_INT NOT NULL, b BOOL NOT NULL, d REAL NOT NULL, t TEXT NOT NULL, bl BLOB NOT NULL);
DECLARE PROC emit_setters_with_nullables (o OBJECT, x OBJECT, i INTEGER, l LONG_INT, b BOOL, d REAL, t TEXT, bl BLOB) OUT (o OBJECT, x OBJECT, i INTEGER, l LONG_INT, b BOOL, d REAL, t TEXT, bl BLOB);
DECLARE PROC no_out_with_setters () (id INTEGER NOT NULL, name TEXT, rate LONG_INT, type INTEGER, size REAL);
DECLARE PROC lotsa_columns_no_result_set () (id INTEGER NOT NULL, name TEXT, rate LONG_INT, type INTEGER, size REAL);
DECLARE PROC early_out_rc_cleared (OUT x INTEGER) USING TRANSACTION;
DECLARE PROC vault_sensitive_with_values_proc () (id INTEGER NOT NULL, name TEXT @SENSITIVE, title TEXT, type LONG_INT @SENSITIVE);
DECLARE PROC vault_sensitive_with_no_values_proc () (id INTEGER NOT NULL, name TEXT @SENSITIVE, title TEXT, type LONG_INT @SENSITIVE);
DECLARE PROC vault_union_all_table_proc () (id INTEGER NOT NULL, name TEXT @SENSITIVE, title TEXT, type LONG_INT @SENSITIVE);
DECLARE PROC vault_alias_column_proc () (alias_name TEXT @SENSITIVE);
DECLARE PROC vault_alias_column_name_proc () (alias_name TEXT @SENSITIVE);
DECLARE PROC vault_cursor_proc () USING TRANSACTION;
DECLARE PROC vault_sensitive_with_context_and_sensitive_columns_proc () (id INTEGER NOT NULL, name TEXT @SENSITIVE, title TEXT, type LONG_INT @SENSITIVE);
DECLARE PROC vault_sensitive_with_no_context_and_sensitive_columns_proc () (id INTEGER NOT NULL, name TEXT @SENSITIVE, title TEXT, type LONG_INT @SENSITIVE);
DECLARE PROC vault_sensitive_with_context_and_no_sensitive_columns_proc () (id INTEGER NOT NULL, name TEXT, title TEXT, type LONG_INT);
DECLARE PROC try_boxing (OUT result OBJECT<bar CURSOR>) USING TRANSACTION;
DECLARE PROC try_unboxing (boxed_cursor OBJECT<bar CURSOR>) USING TRANSACTION;
DECLARE PROC local_cast_int_notnull ();
DECLARE PROC local_cast_int ();
DECLARE PROC local_cast_long_notnull ();
DECLARE PROC local_cast_long ();
DECLARE PROC local_cast_real_notnull ();
DECLARE PROC local_cast_real ();
DECLARE PROC local_cast_bool_notnull ();
DECLARE PROC local_cast_bool ();
DECLARE PROC local_cast_from_bool_notnull ();
DECLARE PROC local_cast_from_bool ();
DECLARE PROC local_cast_from_bool_no_op_notnull ();
DECLARE PROC local_cast_from_bool_no_op ();
DECLARE PROC base_proc_savepoint () USING TRANSACTION;
DECLARE PROC base_proc_savepoint_commit_return () USING TRANSACTION;
DECLARE PROC base_proc_savepoint_rollback_return () USING TRANSACTION;
DECLARE PROC window1 () (month INTEGER, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window2 () (month INTEGER, amount REAL, RunningTotal REAL);
DECLARE PROC window3 () (month INTEGER, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window4 () (month INTEGER, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window5 () (month INTEGER, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window6 () (month INTEGER, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window7 () (month INTEGER, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window8 () (month INTEGER, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window9 () (month INTEGER, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window10 () (month INTEGER, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window11 () (month INTEGER, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window12 () (month INTEGER, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window13 () (month INTEGER, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window14 () (month INTEGER, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window15 () (month INTEGER, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window16 () (month INTEGER, amount REAL, SalesMovingAverage REAL);
DECLARE PROC emit_rc (OUT result_code INTEGER NOT NULL) USING TRANSACTION;
DECLARE PROC rc_test () USING TRANSACTION;
DECLARE PROC rc_test_lazy1 () USING TRANSACTION;
DECLARE PROC rc_test_lazy2 () USING TRANSACTION;
DECLARE PROC virtual_table_creator () USING TRANSACTION;
DECLARE PROC out_arg_cursor (x INTEGER NOT NULL, OUT y INTEGER NOT NULL);
DECLARE PROC make_virt_table () USING TRANSACTION;
DECLARE PROC virtual1 () (vx INTEGER NOT NULL, vy INTEGER);
DECLARE PROC virtual2 () (vx INTEGER NOT NULL, vy INTEGER);
DECLARE PROC use_private_out_union () USING TRANSACTION;
DECLARE PROC no_getters_out_union () OUT UNION (a_field INTEGER NOT NULL);
DECLARE PROC use_no_getters_out_union () USING TRANSACTION;
DECLARE PROC suppress_results_out_union () OUT UNION (a_field INTEGER NOT NULL);
DECLARE PROC use_suppress_results_out_union () USING TRANSACTION;
DECLARE PROC set_out_arg_ref_test (OUT x TEXT);
DECLARE PROC set_out_arg_null_test (OUT x INTEGER);
DECLARE PROC set_out_arg_notnull_test (OUT x INTEGER NOT NULL);
DECLARE PROC early_close_cursor () USING TRANSACTION;
DECLARE PROC various_lets ();
DECLARE PROC try_catch_rc () USING TRANSACTION;
DECLARE PROC out_decl_test_3 (x INTEGER);
DECLARE PROC binary_ops_with_null ();
DECLARE PROC uses_throw () USING TRANSACTION;
DECLARE PROC uses_ifnull_throw (x INTEGER) USING TRANSACTION;
DECLARE PROC out_object (o OBJECT NOT NULL) OUT (o OBJECT NOT NULL);
DECLARE PROC exercise_contracts (a INTEGER, b INTEGER NOT NULL, c TEXT, d TEXT NOT NULL, e BLOB, f BLOB NOT NULL, g OBJECT, h OBJECT NOT NULL, OUT i INTEGER, OUT j INTEGER NOT NULL, OUT k TEXT, OUT l TEXT NOT NULL, INOUT m INTEGER, INOUT n INTEGER NOT NULL, INOUT o TEXT, INOUT p TEXT NOT NULL);
DECLARE PROC public_proc_with_a_contract (t TEXT NOT NULL);
DECLARE PROC result_set_proc_with_contract_in_fetch_results (t TEXT NOT NULL) (id INTEGER NOT NULL, name TEXT, rate LONG_INT, type INTEGER, size REAL);
DECLARE PROC out_proc_with_contract_in_fetch_results (t TEXT NOT NULL) OUT (id INTEGER NOT NULL, name TEXT, rate LONG_INT, type INTEGER, size REAL);
DECLARE PROC nullability_improvements_are_erased_for_sql () (b INTEGER NOT NULL);
DECLARE PROC nullability_improvements_do_not_change_access ();
DECLARE PROC BigFormat () USING TRANSACTION;
DECLARE PROC end_proc ();
