
-- no columns will be considered hidden in this script
-- DDL in procs will not count as declarations
@SCHEMA_UPGRADE_SCRIPT;

-- schema crc 9110227700131655447

-- declare facet helpers-- 
DECLARE facet_data TYPE OBJECT<facet_data>;
DECLARE test_facets facet_data;
DECLARE FUNCTION cql_facets_create() create facet_data not null;
DECLARE FUNCTION cql_facet_add(facets facet_data, facet TEXT NOT NULL, crc LONG NOT NULL) BOOL NOT NULL;
DECLARE FUNCTION cql_facet_upsert(facets facet_data, facet TEXT NOT NULL, crc LONG NOT NULL) BOOL NOT NULL;
DECLARE FUNCTION cql_facet_find(facets facet_data, facet TEXT NOT NULL) LONG NOT NULL;

-- declare recreate update helpers-- 
DECLARE PROCEDURE cql_rebuild_recreate_group (tables TEXT NOT NULL, indices TEXT NOT NULL, deletes TEXT NOT NULL, out result BOOL NOT NULL) USING TRANSACTION;
-- declare sqlite_master -- 
CREATE TABLE sqlite_master (
  type TEXT NOT NULL,
  name TEXT NOT NULL,
  tbl_name TEXT NOT NULL,
  rootpage INTEGER NOT NULL,
  sql TEXT
);

-- declare full schema of tables and views to be upgraded and their dependencies -- 
@ATTRIBUTE(cql:deterministic)
DECLARE SELECT FUNC my_func (x TEXT) TEXT;

DECLARE SELECT FUNC filter_ (id INTEGER) INTEGER NOT NULL;

@DECLARE_SCHEMA_REGION shared;

@DECLARE_SCHEMA_REGION extra USING shared;

@DECLARE_SCHEMA_REGION other;

@begin_schema_region shared;
CREATE TABLE foo(
  id INTEGER PRIMARY KEY,
  rate LONG_INT @DELETE(5),
  rate_2 LONG_INT @DELETE(4, DeleteRate2Proc),
  id2 INTEGER DEFAULT 12345 @CREATE(4, CreateId2Proc),
  name TEXT @CREATE(5),
  name_2 TEXT @CREATE(6)
);
@end_schema_region;

@begin_schema_region shared;
CREATE TABLE added_table(
  id INTEGER NOT NULL,
  name1 TEXT,
  name2 TEXT @CREATE(4)
) @CREATE(3) @DELETE(5);
@end_schema_region;

@begin_schema_region shared;
CREATE TABLE g1(
  id INTEGER PRIMARY KEY,
  name TEXT
) @RECREATE(gr1);
@end_schema_region;

@begin_schema_region shared;
CREATE TABLE use_g1(
  id INTEGER PRIMARY KEY REFERENCES g1 (id),
  name2 TEXT
) @RECREATE(gr1);
@end_schema_region;

@begin_schema_region extra;
CREATE TABLE table2(
  id INTEGER NOT NULL REFERENCES foo (id),
  name1 TEXT @CREATE(2, CreateName1Proc),
  name2 TEXT @CREATE(2, CreateName2Proc),
  name3 TEXT @CREATE(2),
  name4 TEXT @CREATE(2)
);
@end_schema_region;

@begin_schema_region other;
CREATE TABLE other_table(
  id INTEGER
);
@end_schema_region;

CREATE TABLE table_to_recreate(
  id INTEGER NOT NULL,
  name TEXT
) @RECREATE;

CREATE TABLE grouped_table_1(
  id INTEGER NOT NULL,
  name TEXT
) @RECREATE(my_group);

CREATE TABLE grouped_table_2(
  id INTEGER NOT NULL,
  name TEXT
) @RECREATE(my_group);

CREATE TABLE grouped_table_3(
  id INTEGER NOT NULL,
  name TEXT
) @RECREATE(my_group);

CREATE TABLE t5(
  id LONG_INT PRIMARY KEY AUTOINCREMENT,
  data TEXT
);

CREATE TABLE t6(
  id LONG_INT PRIMARY KEY,
  FOREIGN KEY (id) REFERENCES t5 (id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE VIRTUAL TABLE a_virtual_table USING a_module (this, that, the_other) AS (
  id INTEGER @SENSITIVE,
  t TEXT
);

CREATE VIRTUAL TABLE @EPONYMOUS epon USING epon AS (
  id INTEGER @SENSITIVE,
  t TEXT
);

CREATE VIRTUAL TABLE complex_virtual_table USING a_module (ARGUMENTS FOLLOWING) AS (
  id INTEGER @SENSITIVE,
  t TEXT
);

CREATE VIRTUAL TABLE deleted_virtual_table USING a_module (ARGUMENTS FOLLOWING) AS (
  id INTEGER @SENSITIVE,
  t TEXT
) @DELETE(4, cql:module_must_not_be_deleted_see_docs_for_CQL0392);

CREATE TABLE migrated_from_recreate(
  id INTEGER PRIMARY KEY,
  t TEXT
) @CREATE(4, cql:from_recreate);

CREATE TABLE migrated_from_recreate2(
  id INTEGER PRIMARY KEY REFERENCES migrated_from_recreate (id),
  t TEXT
) @CREATE(4, cql:from_recreate);

CREATE TABLE conflict_clause_t(
  id INTEGER NOT NULL ON CONFLICT FAIL
);

CREATE TABLE conflict_clause_pk(
  id INTEGER NOT NULL,
  CONSTRAINT pk1 PRIMARY KEY (id) ON CONFLICT ROLLBACK
);

CREATE TABLE expression_pk(
  id INTEGER NOT NULL,
  CONSTRAINT pk1 PRIMARY KEY (id / 2, id % 2)
);

CREATE TABLE expression_uk(
  id INTEGER NOT NULL,
  CONSTRAINT uk1 UNIQUE (id / 2, id % 2)
);

CREATE TABLE delete__second(
  id INTEGER PRIMARY KEY
) @DELETE(7);

CREATE TABLE delete_first(
  id INTEGER REFERENCES delete__second (id)
) @DELETE(7);

CREATE TABLE create_first(
  id INTEGER PRIMARY KEY
) @CREATE(7);

CREATE TABLE create__second(
  id INTEGER REFERENCES create_first (id)
) @CREATE(7);

@ATTRIBUTE(cql:blob_storage)
CREATE TABLE blob_storage_at_create_table(
  x INTEGER,
  y TEXT
) @CREATE(5);

@ATTRIBUTE(cql:blob_storage)
CREATE TABLE blob_storage_baseline_table(
  x INTEGER,
  y TEXT
);

CREATE TABLE unsub_recreated(
  anything TEXT
) @RECREATE;

@ATTRIBUTE(cql:backing_table)
CREATE TABLE backing(
  k BLOB PRIMARY KEY,
  v BLOB NOT NULL
);

@ATTRIBUTE(cql:backed_by=backing)
CREATE TABLE backed(
  x INTEGER PRIMARY KEY,
  y INTEGER
);

@ATTRIBUTE(cql:backing_table)
CREATE TABLE recreate_backing(
  k BLOB PRIMARY KEY,
  v BLOB NOT NULL
) @RECREATE(foo);

@ATTRIBUTE(cql:backed_by=recreate_backing)
CREATE TABLE recreate_backed(
  x INTEGER PRIMARY KEY,
  y INTEGER
) @RECREATE(foo);

CREATE TABLE after_backed_table(
  x INTEGER PRIMARY KEY
) @RECREATE(foo);

@begin_schema_region other;
CREATE TABLE unsub_voyage(
  v1 INTEGER,
  v3 TEXT @CREATE(3),
  v5 TEXT @CREATE(5),
  v7 TEXT @CREATE(7)
);
@end_schema_region;

@begin_schema_region other;
CREATE TABLE unsub_inner(
  id INTEGER PRIMARY KEY,
  name_inner TEXT
);
@end_schema_region;

@begin_schema_region other;
CREATE TABLE unsub_outer(
  id INTEGER PRIMARY KEY REFERENCES unsub_inner (id),
  name_outer TEXT
);
@end_schema_region;

@begin_schema_region other;
CREATE TABLE some_table(
  id INTEGER
);
@end_schema_region;

@begin_schema_region shared;
CREATE VIEW shared_view AS
SELECT *
  FROM foo;
@end_schema_region;

@begin_schema_region shared;
CREATE VIEW live_view AS
SELECT *
  FROM foo;
@end_schema_region;

@begin_schema_region shared;
CREATE VIEW dead_view AS
SELECT *
  FROM foo @DELETE(2, DeadViewMigration);
@end_schema_region;

@begin_schema_region extra;
CREATE VIEW another_live_view AS
SELECT *
  FROM table2;
@end_schema_region;

@begin_schema_region other;
CREATE VIEW foo_view_unsubscribed AS
SELECT *
  FROM some_table;
@end_schema_region;

@begin_schema_region other;
CREATE VIEW foo_view_normal AS
SELECT *
  FROM some_table;
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX shared_index ON foo (name, name_2);
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX gr1_index ON g1 (name);
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX gr1_index2 ON g1 (name, id);
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX gr1_index3 ON g1 (my_func(name), id) @DELETE(5);
@end_schema_region;

@begin_schema_region extra;
CREATE INDEX not_shared_present_index ON table2 (name1, name2);
@end_schema_region;

@begin_schema_region extra;
CREATE INDEX index_going_away ON table2 (name3) @DELETE(3);
@end_schema_region;

CREATE INDEX recreate_index_needs_deleting ON migrated_from_recreate (t);

CREATE INDEX recreate_index_needs_deleting2 ON migrated_from_recreate (t);

CREATE INDEX recreate_index_needs_deleting3 ON migrated_from_recreate2 (t);

CREATE INDEX unsub_recreated_index ON unsub_recreated (anything);

@begin_schema_region other;
CREATE INDEX unsub_voyage_index ON unsub_voyage (v1);
@end_schema_region;

@begin_schema_region other;
CREATE INDEX us1 ON unsub_inner (name_inner);
@end_schema_region;

@begin_schema_region other;
CREATE INDEX us2 ON unsub_outer (name_outer);
@end_schema_region;

@begin_schema_region shared;
CREATE TRIGGER shared_trigger
  BEFORE INSERT ON foo
BEGIN
SELECT 1;
END;
@end_schema_region;

@begin_schema_region extra;
CREATE TRIGGER not_shared_trigger
  BEFORE INSERT ON foo
BEGIN
SELECT new.id;
END;
@end_schema_region;

@begin_schema_region shared;
CREATE TRIGGER insert_trigger
  BEFORE INSERT ON foo
  FOR EACH ROW
  WHEN new.id > 7
BEGIN
SELECT new.id;
END;
@end_schema_region;

@begin_schema_region shared;
CREATE TRIGGER old_trigger_was_deleted
  BEFORE INSERT ON foo
BEGIN
SELECT new.id;
END @DELETE(3);
@end_schema_region;

CREATE TRIGGER trig_with_filter
  BEFORE INSERT ON foo
  WHEN filter_(new.id) = 3
BEGIN
DELETE FROM foo WHERE id = 77;
END;

CREATE TRIGGER unsub_recreated_trigger
  BEFORE INSERT ON unsub_recreated
BEGIN
SELECT 1;
END;

@begin_schema_region other;
CREATE TRIGGER unsub_voyage_trigger
  BEFORE INSERT ON unsub_voyage
BEGIN
SELECT 1;
END;
@end_schema_region;

@begin_schema_region shared;
@SCHEMA_AD_HOC_MIGRATION(5, MyAdHocMigrationScript);
@end_schema_region;

@UNSUB(unsub_recreated);

@begin_schema_region other;
@UNSUB(unsub_voyage);
@end_schema_region;

@begin_schema_region other;
@UNSUB(unsub_outer);
@end_schema_region;

@begin_schema_region other;
@UNSUB(unsub_inner);
@end_schema_region;

@begin_schema_region other;
@UNSUB(foo_view_unsubscribed);
@end_schema_region;

-- facets table declaration --
CREATE TABLE IF NOT EXISTS test_cql_schema_facets(
  facet TEXT NOT NULL PRIMARY KEY,
  version LONG INTEGER NOT NULL
);

-- helper proc for getting the schema version of a facet
CREATE PROCEDURE test_cql_get_facet_version(_facet TEXT NOT NULL, out _version LONG INTEGER NOT NULL)
BEGIN
  BEGIN TRY
    SET _version := (SELECT version FROM test_cql_schema_facets WHERE facet = _facet LIMIT 1 IF NOTHING -1);
  END TRY;
  BEGIN CATCH
    SET _version := -1;
  END CATCH;
END;

-- saved facets table declaration --
CREATE TEMP TABLE test_cql_schema_facets_saved(
  facet TEXT NOT NULL PRIMARY KEY,
  version LONG INTEGER NOT NULL
);

-- holds all the table definitions out of sqlite_master
DECLARE test_tables_dict_ OBJECT<string_dictionary>;

-- helper proc for creating the dictionary of table defs from sqlite_master
@attribute(cql:private)
CREATE PROCEDURE test_get_table_defs()
BEGIN
  DECLARE C CURSOR FOR SELECT name, sql from sqlite_master where type = 'table';
  SET test_tables_dict_ := cql_string_dictionary_create();
  LOOP FETCH C
  BEGIN
    IF C.sql IS NOT NULL THEN
      LET added := cql_string_dictionary_add(test_tables_dict_, C.name, C.sql);
    END IF;
  END;
END;

-- helper proc for creating the schema version table
@attribute(cql:private)
CREATE PROCEDURE test_create_cql_schema_facets_if_needed()
BEGIN
  CREATE TABLE IF NOT EXISTS test_cql_schema_facets(
    facet TEXT NOT NULL PRIMARY KEY,
    version LONG INTEGER NOT NULL
  );
END;

-- helper proc for saving the schema version table
@attribute(cql:private)
CREATE PROCEDURE test_save_cql_schema_facets()
BEGIN
  DROP TABLE IF EXISTS test_cql_schema_facets_saved;
  CREATE TEMP TABLE test_cql_schema_facets_saved(
    facet TEXT NOT NULL PRIMARY KEY,
    version LONG INTEGER NOT NULL
  );
  INSERT INTO test_cql_schema_facets_saved
    SELECT * FROM test_cql_schema_facets;
END;

-- helper proc for setting the schema version of a facet
CREATE PROCEDURE test_cql_set_facet_version(_facet TEXT NOT NULL, _version LONG INTEGER NOT NULL)
BEGIN
  INSERT OR REPLACE INTO test_cql_schema_facets (facet, version) VALUES(_facet, _version);
  LET added := cql_facet_upsert(test_facets, _facet, _version);
END;

-- helper proc for getting the schema version CRC for a version index
@attribute(cql:private)
CREATE PROCEDURE test_cql_get_version_crc(_v INTEGER NOT NULL, out _crc LONG INTEGER NOT NULL)
BEGIN
  SET _crc := cql_facet_find(test_facets, printf('cql_schema_v%d', _v));
END;

-- helper proc for setting the schema version CRC for a version index
CREATE PROCEDURE test_cql_set_version_crc(_v INTEGER NOT NULL, _crc LONG INTEGER NOT NULL)
BEGIN
  INSERT OR REPLACE INTO test_cql_schema_facets (facet, version) VALUES('cql_schema_v'||_v, _crc);
END;

-- helper proc to reset any triggers that are on the old plan --
DECLARE PROCEDURE cql_exec_internal(sql TEXT NOT NULL) USING TRANSACTION;

CREATE PROCEDURE test_drop_table_helper(table_name TEXT NOT NULL)
BEGIN
  CALL cql_exec_internal(printf('DROP TABLE IF EXISTS %s', table_name));
  -- remove the table from our dictionary marking it dropped
  IF test_tables_dict_ IS NULL THROW;
  LET added := cql_string_dictionary_add(test_tables_dict_, table_name, '');
END;

-- declared upgrade procedures if any
DECLARE PROC RecreateGroup1Migration() USING TRANSACTION;

@attribute(cql:private)
CREATE PROC test_g_gr1_group_drop()
BEGIN
  DROP TABLE IF EXISTS use_g1;
  DROP TABLE IF EXISTS g1;
END;

@attribute(cql:private)
CREATE PROC test_t_table_to_recreate_group_drop()
BEGIN
  DROP TABLE IF EXISTS table_to_recreate;
END;

@attribute(cql:private)
CREATE PROC test_g_my_group_group_drop()
BEGIN
  DROP TABLE IF EXISTS grouped_table_3;
  DROP TABLE IF EXISTS grouped_table_2;
  DROP TABLE IF EXISTS grouped_table_1;
END;

@attribute(cql:private)
CREATE PROC test_t_a_virtual_table_group_drop()
BEGIN
  DROP TABLE IF EXISTS a_virtual_table;
END;

@attribute(cql:private)
CREATE PROC test_t_complex_virtual_table_group_drop()
BEGIN
  DROP TABLE IF EXISTS complex_virtual_table;
END;

@attribute(cql:private)
CREATE PROC test_t_unsub_recreated_group_drop()
BEGIN
  DROP TABLE IF EXISTS unsub_recreated;
END;

@attribute(cql:private)
CREATE PROC test_g_foo_group_drop()
BEGIN
  DROP TABLE IF EXISTS after_backed_table;
  DROP TABLE IF EXISTS recreate_backing;
END;
DECLARE PROC CreateName1Proc() USING TRANSACTION;
DECLARE PROC CreateName2Proc() USING TRANSACTION;
DECLARE PROC DeadViewMigration() USING TRANSACTION;

@attribute(cql:private)
CREATE PROC test_migrated_from_recreate2_full_drop()
BEGIN
  -- mark indices as having been deleted
  CALL test_cql_set_facet_version(cql_compressed('recreate_index_needs_deleting3_index_crc'), -1);

  -- drop the target table and mark it dropped
  CALL test_drop_table_helper(cql_compressed('migrated_from_recreate2'));
END;

@attribute(cql:private)
CREATE PROC test_migrated_from_recreate_full_drop()
BEGIN
  -- drop all dependent tables
  CALL test_migrated_from_recreate2_full_drop();

  -- mark indices as having been deleted
  CALL test_cql_set_facet_version(cql_compressed('recreate_index_needs_deleting_index_crc'), -1);
  CALL test_cql_set_facet_version(cql_compressed('recreate_index_needs_deleting2_index_crc'), -1);

  -- drop the target table and mark it dropped
  CALL test_drop_table_helper(cql_compressed('migrated_from_recreate'));
END;
DECLARE PROC CreateId2Proc() USING TRANSACTION;
DECLARE PROC DeleteRate2Proc() USING TRANSACTION;
DECLARE PROC MyAdHocMigrationScript() USING TRANSACTION;

CREATE PROCEDURE test_cql_install_baseline_schema()
BEGIN
  CREATE TABLE IF NOT EXISTS foo(
    id INTEGER PRIMARY KEY,
    rate LONG_INT,
    rate_2 LONG_INT
  );

  CREATE TABLE IF NOT EXISTS table2(
    id INTEGER NOT NULL REFERENCES foo (id)
  );

  CREATE TABLE IF NOT EXISTS other_table(
    id INTEGER
  );

  CREATE TABLE IF NOT EXISTS t5(
    id LONG_INT PRIMARY KEY AUTOINCREMENT,
    data TEXT
  );

  CREATE TABLE IF NOT EXISTS t6(
    id LONG_INT PRIMARY KEY,
    FOREIGN KEY (id) REFERENCES t5 (id) ON UPDATE CASCADE ON DELETE CASCADE
  );

  CREATE TABLE IF NOT EXISTS conflict_clause_t(
    id INTEGER NOT NULL ON CONFLICT FAIL
  );

  CREATE TABLE IF NOT EXISTS conflict_clause_pk(
    id INTEGER NOT NULL,
    CONSTRAINT pk1 PRIMARY KEY (id) ON CONFLICT ROLLBACK
  );

  CREATE TABLE IF NOT EXISTS expression_pk(
    id INTEGER NOT NULL,
    CONSTRAINT pk1 PRIMARY KEY (id / 2, id % 2)
  );

  CREATE TABLE IF NOT EXISTS expression_uk(
    id INTEGER NOT NULL,
    CONSTRAINT uk1 UNIQUE (id / 2, id % 2)
  );

  CREATE TABLE IF NOT EXISTS backing(
    k BLOB PRIMARY KEY,
    v BLOB NOT NULL
  );

  CREATE TABLE IF NOT EXISTS some_table(
    id INTEGER
  );

END;
-- drop all the views we know
@attribute(cql:private)
CREATE PROCEDURE test_cql_drop_all_views()
BEGIN
  DROP VIEW IF EXISTS shared_view;
  DROP VIEW IF EXISTS live_view;
  DROP VIEW IF EXISTS dead_view;
  DROP VIEW IF EXISTS another_live_view;
  DROP VIEW IF EXISTS foo_view_unsubscribed;
  DROP VIEW IF EXISTS foo_view_normal;
END;

-- create all the views we know
@attribute(cql:private)
CREATE PROCEDURE test_cql_create_all_views()
BEGIN
  CREATE VIEW shared_view AS
  SELECT *
    FROM foo;
  CREATE VIEW live_view AS
  SELECT *
    FROM foo;
  CREATE VIEW another_live_view AS
  SELECT *
    FROM table2;
  CREATE VIEW foo_view_normal AS
  SELECT *
    FROM some_table;
END;


-- drop all the indices that are deleted or changing
@attribute(cql:private)
CREATE PROCEDURE test_cql_drop_all_indices()
BEGIN
  IF cql_facet_find(test_facets, 'shared_index_index_crc') != -8812401562048594220 THEN
    DROP INDEX IF EXISTS shared_index;
  END IF;
  DROP INDEX IF EXISTS gr1_index3;
  CALL test_cql_set_facet_version('gr1_index3_index_crc', -1);
  IF cql_facet_find(test_facets, 'not_shared_present_index_index_crc') != -4019575091142856767 THEN
    DROP INDEX IF EXISTS not_shared_present_index;
  END IF;
  DROP INDEX IF EXISTS index_going_away;
  CALL test_cql_set_facet_version('index_going_away_index_crc', -1);
  IF cql_facet_find(test_facets, 'recreate_index_needs_deleting_index_crc') != -5814116180550350562 THEN
    DROP INDEX IF EXISTS recreate_index_needs_deleting;
  END IF;
  IF cql_facet_find(test_facets, 'recreate_index_needs_deleting2_index_crc') != 3261027906397844075 THEN
    DROP INDEX IF EXISTS recreate_index_needs_deleting2;
  END IF;
  IF cql_facet_find(test_facets, 'recreate_index_needs_deleting3_index_crc') != 6591796666912246967 THEN
    DROP INDEX IF EXISTS recreate_index_needs_deleting3;
  END IF;
  DROP INDEX IF EXISTS unsub_recreated_index;
  CALL test_cql_set_facet_version('unsub_recreated_index_index_crc', -1);
  DROP INDEX IF EXISTS unsub_voyage_index;
  CALL test_cql_set_facet_version('unsub_voyage_index_index_crc', -1);
  DROP INDEX IF EXISTS us1;
  CALL test_cql_set_facet_version('us1_index_crc', -1);
  DROP INDEX IF EXISTS us2;
  CALL test_cql_set_facet_version('us2_index_crc', -1);
END;

-- create all the indices we need
@attribute(cql:private)
CREATE PROCEDURE test_cql_create_all_indices()
BEGIN
  IF cql_facet_find(test_facets, 'shared_index_index_crc') != -8812401562048594220 THEN
    CREATE INDEX shared_index ON foo (name, name_2);
    CALL test_cql_set_facet_version('shared_index_index_crc', -8812401562048594220);
  END IF;
  IF cql_facet_find(test_facets, 'not_shared_present_index_index_crc') != -4019575091142856767 THEN
    CREATE INDEX not_shared_present_index ON table2 (name1, name2);
    CALL test_cql_set_facet_version('not_shared_present_index_index_crc', -4019575091142856767);
  END IF;
  IF cql_facet_find(test_facets, 'recreate_index_needs_deleting_index_crc') != -5814116180550350562 THEN
    CREATE INDEX recreate_index_needs_deleting ON migrated_from_recreate (t);
    CALL test_cql_set_facet_version('recreate_index_needs_deleting_index_crc', -5814116180550350562);
  END IF;
  IF cql_facet_find(test_facets, 'recreate_index_needs_deleting2_index_crc') != 3261027906397844075 THEN
    CREATE INDEX recreate_index_needs_deleting2 ON migrated_from_recreate (t);
    CALL test_cql_set_facet_version('recreate_index_needs_deleting2_index_crc', 3261027906397844075);
  END IF;
  IF cql_facet_find(test_facets, 'recreate_index_needs_deleting3_index_crc') != 6591796666912246967 THEN
    CREATE INDEX recreate_index_needs_deleting3 ON migrated_from_recreate2 (t);
    CALL test_cql_set_facet_version('recreate_index_needs_deleting3_index_crc', 6591796666912246967);
  END IF;
END;

-- drop all the triggers we know
@attribute(cql:private)
CREATE PROCEDURE test_cql_drop_all_triggers()
BEGIN
  DROP TRIGGER IF EXISTS shared_trigger;
  DROP TRIGGER IF EXISTS not_shared_trigger;
  DROP TRIGGER IF EXISTS insert_trigger;
  DROP TRIGGER IF EXISTS old_trigger_was_deleted;
  DROP TRIGGER IF EXISTS trig_with_filter;
  DROP TRIGGER IF EXISTS unsub_recreated_trigger;
  DROP TRIGGER IF EXISTS unsub_voyage_trigger;
END;

-- create all the triggers we know
@attribute(cql:private)
CREATE PROCEDURE test_cql_create_all_triggers()
BEGIN
  CREATE TRIGGER shared_trigger
    BEFORE INSERT ON foo
  BEGIN
  SELECT 1;
  END;
  CREATE TRIGGER not_shared_trigger
    BEFORE INSERT ON foo
  BEGIN
  SELECT new.id;
  END;
  CREATE TRIGGER insert_trigger
    BEFORE INSERT ON foo
    FOR EACH ROW
    WHEN new.id > 7
  BEGIN
  SELECT new.id;
  END;
  CREATE TRIGGER trig_with_filter
    BEFORE INSERT ON foo
    WHEN filter_(new.id) = 3
  BEGIN
  DELETE FROM foo WHERE id = 77;
  END;
END;

-- recreate all the non-virtual @recreate tables that might have changed
@attribute(cql:private)
CREATE PROCEDURE test_cql_recreate_non_virtual_tables()
BEGIN
  IF cql_facet_find(test_facets, 'all_nonvirtual_tables_crc') == -2451202017340721379 RETURN; 
  IF cql_facet_find(test_facets, 'gr1_group_crc') != -5103843476505738426 THEN
    LET gr1_result := cql_rebuild_recreate_group(cql_compressed(
        "CREATE TABLE g1( "
          "id INTEGER PRIMARY KEY, "
          "name TEXT "
        "); CREATE TABLE use_g1( "
          "id INTEGER PRIMARY KEY REFERENCES g1 (id), "
          "name2 TEXT "
        "); "
      ),
      cql_compressed(
        "CREATE INDEX gr1_index ON g1 (name); "
        "CREATE INDEX gr1_index2 ON g1 (name, id);"
      ),
      cql_compressed(""));

    -- recreate migration procedure required
    CALL RecreateGroup1Migration();

    CALL test_cql_set_facet_version('gr1_group_crc', -5103843476505738426);
  END IF;
  IF cql_facet_find(test_facets, 'table_to_recreate_table_crc') != -3246234300517746946 THEN
    LET table_to_recreate_result := cql_rebuild_recreate_group(cql_compressed(
        "CREATE TABLE table_to_recreate( "
          "id INTEGER NOT NULL, "
          "name TEXT "
        "); "
      ),
      cql_compressed(""),
      cql_compressed(""));
    CALL test_cql_set_facet_version('table_to_recreate_table_crc', -3246234300517746946);
  END IF;
  IF cql_facet_find(test_facets, 'my_group_group_crc') != -5749224930715671870 THEN
    LET my_group_result := cql_rebuild_recreate_group(cql_compressed(
        "CREATE TABLE grouped_table_1( "
          "id INTEGER NOT NULL, "
          "name TEXT "
        "); CREATE TABLE grouped_table_2( "
          "id INTEGER NOT NULL, "
          "name TEXT "
        "); CREATE TABLE grouped_table_3( "
          "id INTEGER NOT NULL, "
          "name TEXT "
        "); "
      ),
      cql_compressed(""),
      cql_compressed(""));
    CALL test_cql_set_facet_version('my_group_group_crc', -5749224930715671870);
  END IF;
  IF cql_facet_find(test_facets, 'unsub_recreated_table_crc') != 5091758298977444343 THEN
    LET unsub_recreated_result := cql_rebuild_recreate_group(cql_compressed(""),
      cql_compressed(""),
      cql_compressed(
        "DROP TABLE IF EXISTS unsub_recreated;"
      ));
    CALL test_cql_set_facet_version('unsub_recreated_table_crc', 5091758298977444343);
  END IF;
  IF cql_facet_find(test_facets, 'foo_group_crc') != -5376428347335479627 THEN
    LET foo_result := cql_rebuild_recreate_group(cql_compressed(
        "CREATE TABLE recreate_backing( "
          "k BLOB PRIMARY KEY, "
          "v BLOB NOT NULL "
        "); CREATE TABLE after_backed_table( "
          "x INTEGER PRIMARY KEY "
        "); "
      ),
      cql_compressed(""),
      cql_compressed(""));
    CALL test_cql_set_facet_version('foo_group_crc', -5376428347335479627);
  END IF;
  CALL test_cql_set_facet_version('all_nonvirtual_tables_crc', -2451202017340721379);
END;

-- recreate all the virtual @recreate tables that might have changed
@attribute(cql:private)
CREATE PROCEDURE test_cql_recreate_virtual_tables()
BEGIN
  IF cql_facet_find(test_facets, 'all_virtual_tables_crc') == 8442011462455410540 RETURN; 
  IF cql_facet_find(test_facets, 'a_virtual_table_table_crc') != 6926381574149521832 THEN
    LET a_virtual_table_result := cql_rebuild_recreate_group(cql_compressed(
        "CREATE VIRTUAL TABLE a_virtual_table USING a_module (this, that, the_other); "
      ),
      cql_compressed(""),
      cql_compressed(""));
    CALL test_cql_set_facet_version('a_virtual_table_table_crc', 6926381574149521832);
  END IF;
  IF cql_facet_find(test_facets, 'complex_virtual_table_table_crc') != -3297146967072858107 THEN
    LET complex_virtual_table_result := cql_rebuild_recreate_group(cql_compressed(
        "CREATE VIRTUAL TABLE complex_virtual_table USING a_module ( "
          "id INTEGER, "
          "t TEXT); "
      ),
      cql_compressed(""),
      cql_compressed(""));
    CALL test_cql_set_facet_version('complex_virtual_table_table_crc', -3297146967072858107);
  END IF;
  CALL test_cql_set_facet_version('all_virtual_tables_crc', 8442011462455410540);
END;

CREATE PROCEDURE test_cql_install_temp_schema()
BEGIN
  CREATE TEMP TABLE this_table_appears_in_temp_section(
    temp_section_integer INTEGER
  );

  CREATE TEMP VIEW temp_view_in_temp_section AS
  SELECT *
    FROM foo;

  CREATE TEMP TRIGGER temp_trigger_in_temp_section
    BEFORE DELETE ON foo
    FOR EACH ROW
    WHEN old.id > 7
  BEGIN
  SELECT old.id;
  END;

END;
@attribute(cql:private)
CREATE PROCEDURE test_setup_facets()
BEGIN
  BEGIN TRY
    SET test_facets := cql_facets_create();
    DECLARE C CURSOR FOR SELECT * from test_cql_schema_facets;
    LOOP FETCH C
    BEGIN
      LET added := cql_facet_add(test_facets, C.facet, C.version);
    END;
  END TRY;
  BEGIN CATCH
   -- if table doesn't exist we just have empty facets, that's ok
  END CATCH;
END;

DECLARE FUNCTION _cql_contains_column_def(needle TEXT, haystack TEXT) BOOL NOT NULL;
@attribute(cql:private)
CREATE PROC test_column_exists(table_ TEXT NOT NULL, col_info TEXT NOT NULL, OUT exists_ BOOL NOT NULL)
BEGIN
  IF test_tables_dict_ IS NULL THROW;
  LET table_str := cql_string_dictionary_find(test_tables_dict_, table_);
  SET exists_ := _cql_contains_column_def(table_str, col_info);
END;

@attribute(cql:private)
CREATE PROC test_table_exists(table_ TEXT NOT NULL, OUT exists_ BOOL NOT NULL)
BEGIN
  IF test_tables_dict_ IS NULL THROW;
  LET result := cql_string_dictionary_find(test_tables_dict_, table_);
  SET exists_ := result IS NOT NULL and result IS NOT '';
END;

@attribute(cql:private)
CREATE PROC test_cql_drop_tables()
BEGIN
  DROP TABLE IF EXISTS deleted_virtual_table; --@delete
  DROP TABLE IF EXISTS added_table; --@delete
  DROP TABLE IF EXISTS delete_first; --@delete
  DROP TABLE IF EXISTS delete__second; --@delete
  DROP TABLE IF EXISTS unsub_outer; --@unsub
  DROP TABLE IF EXISTS unsub_inner; --@unsub
  DROP TABLE IF EXISTS unsub_voyage; --@unsub
END;

@attribute(cql:private)
CREATE PROCEDURE test_perform_upgrade_steps(include_virtual_tables BOOL NOT NULL)
BEGIN
  LET facet := cql_compressed('cql_schema_crc_no_virtual');
  IF cql_facet_find(test_facets, facet) <> 3058097930777242867 THEN
    DECLARE schema_version LONG INTEGER NOT NULL;
    -- dropping all views --
    CALL test_cql_drop_all_views();

    -- dropping condemned or changing indices --
    CALL test_cql_drop_all_indices();

    -- dropping condemned or changing triggers --
    CALL test_cql_drop_all_triggers();

    ---- install baseline schema if needed ----

    CALL test_cql_get_version_crc(0, schema_version);
    IF schema_version != 129671327043555633 THEN
      CALL test_cql_install_baseline_schema();
      CALL test_cql_set_version_crc(0, 129671327043555633);
    END IF;

    CALL test_get_table_defs();

    ---- upgrade to schema version 2 ----

    -- altering table table2 to add column name1 TEXT;

    IF NOT test_column_exists(cql_compressed('table2'), cql_compressed('name1 TEXT')) THEN 
      ALTER TABLE table2 ADD COLUMN name1 TEXT;
    END IF;

    -- altering table table2 to add column name2 TEXT;

    IF NOT test_column_exists(cql_compressed('table2'), cql_compressed('name2 TEXT')) THEN 
      ALTER TABLE table2 ADD COLUMN name2 TEXT;
    END IF;

    -- altering table table2 to add column name3 TEXT;

    IF NOT test_column_exists(cql_compressed('table2'), cql_compressed('name3 TEXT')) THEN 
      ALTER TABLE table2 ADD COLUMN name3 TEXT;
    END IF;

    -- altering table table2 to add column name4 TEXT;

    IF NOT test_column_exists(cql_compressed('table2'), cql_compressed('name4 TEXT')) THEN 
      ALTER TABLE table2 ADD COLUMN name4 TEXT;
    END IF;

      -- delete migration proc for dead_view will run

    -- data migration procedures
    IF cql_facet_find(test_facets, 'CreateName1Proc') = -1 THEN
      CALL CreateName1Proc();
      CALL test_cql_set_facet_version('CreateName1Proc', 2);
    END IF;
    IF cql_facet_find(test_facets, 'CreateName2Proc') = -1 THEN
      CALL CreateName2Proc();
      CALL test_cql_set_facet_version('CreateName2Proc', 2);
    END IF;
    IF cql_facet_find(test_facets, 'DeadViewMigration') = -1 THEN
      CALL DeadViewMigration();
      CALL test_cql_set_facet_version('DeadViewMigration', 2);
    END IF;

    ---- upgrade to schema version 3 ----

    IF NOT test_table_exists(cql_compressed('added_table')) THEN
      -- creating table added_table

      CREATE TABLE IF NOT EXISTS added_table(
        id INTEGER NOT NULL,
        name1 TEXT
      );
    END IF;

    ---- upgrade to schema version 4 ----

    -- one time drop moving to create from recreate migrated_from_recreate

    SET facet := cql_compressed('1_time_drop_migrated_from_recreate');
    IF cql_facet_find(test_facets, facet) != 4 THEN
      CALL test_migrated_from_recreate_full_drop();
      CALL test_cql_set_facet_version(facet, 4);
    END IF;

    IF NOT test_table_exists(cql_compressed('migrated_from_recreate')) THEN
      -- creating table migrated_from_recreate

      CREATE TABLE IF NOT EXISTS migrated_from_recreate(
        id INTEGER PRIMARY KEY,
        t TEXT
      );
    END IF;

    -- one time drop moving to create from recreate migrated_from_recreate2

    SET facet := cql_compressed('1_time_drop_migrated_from_recreate2');
    IF cql_facet_find(test_facets, facet) != 4 THEN
      CALL test_migrated_from_recreate2_full_drop();
      CALL test_cql_set_facet_version(facet, 4);
    END IF;

    IF NOT test_table_exists(cql_compressed('migrated_from_recreate2')) THEN
      -- creating table migrated_from_recreate2

      CREATE TABLE IF NOT EXISTS migrated_from_recreate2(
        id INTEGER PRIMARY KEY REFERENCES migrated_from_recreate (id),
        t TEXT
      );
    END IF;

    -- altering table foo to add column id2 INTEGER;

    IF NOT test_column_exists(cql_compressed('foo'), cql_compressed('id2 INTEGER')) THEN 
      ALTER TABLE foo ADD COLUMN id2 INTEGER DEFAULT 12345;
    END IF;

    -- logical delete of column rate_2 from foo; -- no ddl

    -- data migration procedures
    IF cql_facet_find(test_facets, 'CreateId2Proc') = -1 THEN
      CALL CreateId2Proc();
      CALL test_cql_set_facet_version('CreateId2Proc', 4);
    END IF;
    IF cql_facet_find(test_facets, 'DeleteRate2Proc') = -1 THEN
      CALL DeleteRate2Proc();
      CALL test_cql_set_facet_version('DeleteRate2Proc', 4);
    END IF;

    ---- upgrade to schema version 5 ----

    -- altering table foo to add column name TEXT;

    IF NOT test_column_exists(cql_compressed('foo'), cql_compressed('name TEXT')) THEN 
      ALTER TABLE foo ADD COLUMN name TEXT;
    END IF;

    -- logical delete of column rate from foo; -- no ddl

    -- ad hoc migration proc MyAdHocMigrationScript will run

    -- data migration procedures
    IF cql_facet_find(test_facets, 'MyAdHocMigrationScript') = -1 THEN
      CALL MyAdHocMigrationScript();
      CALL test_cql_set_facet_version('MyAdHocMigrationScript', 5);
    END IF;

    ---- upgrade to schema version 6 ----

    -- altering table foo to add column name_2 TEXT;

    IF NOT test_column_exists(cql_compressed('foo'), cql_compressed('name_2 TEXT')) THEN 
      ALTER TABLE foo ADD COLUMN name_2 TEXT;
    END IF;

    ---- upgrade to schema version 7 ----

    IF NOT test_table_exists(cql_compressed('create_first')) THEN
      -- creating table create_first

      CREATE TABLE IF NOT EXISTS create_first(
        id INTEGER PRIMARY KEY
      );
    END IF;

    IF NOT test_table_exists(cql_compressed('create__second')) THEN
      -- creating table create__second

      CREATE TABLE IF NOT EXISTS create__second(
        id INTEGER REFERENCES create_first (id)
      );
    END IF;

    CALL test_cql_drop_tables();
    CALL test_cql_recreate_non_virtual_tables();
    CALL test_cql_create_all_views();
    CALL test_cql_create_all_indices();
    CALL test_cql_create_all_triggers();

    CALL test_cql_set_facet_version('cql_schema_version', 7);
    CALL test_cql_set_facet_version('cql_schema_crc_no_virtual', 3058097930777242867);
  END IF;
  IF include_virtual_tables THEN
    CALL test_cql_recreate_virtual_tables();
    CALL test_cql_set_facet_version('cql_schema_crc', 9110227700131655447);
  END IF;
END;

CREATE PROCEDURE test_get_current_and_proposed_versions(
    out current long not null,
    out proposed long not null
    )
BEGIN
    SET current := test_cql_get_facet_version('cql_schema_version');
    SET proposed := 7;
END;

@attribute(cql:private)
CREATE PROCEDURE test_perform_needed_upgrades(include_virtual_tables BOOL NOT NULL)
BEGIN
  -- check for downgrade --
  IF cql_facet_find(test_facets, 'cql_schema_version') > 7 THEN
    SELECT 'downgrade detected' facet;
  ELSE
    -- save the current facets so we can diff them later --
    CALL test_save_cql_schema_facets();
    CALL test_perform_upgrade_steps(include_virtual_tables);

    -- finally produce the list of differences
    SELECT T1.facet FROM
      test_cql_schema_facets T1
      LEFT OUTER JOIN test_cql_schema_facets_saved T2
        ON T1.facet = T2.facet
      WHERE T1.version is not T2.version;
  END IF;
END;

@attribute(cql:private)
CREATE PROCEDURE test_helper(include_virtual_tables BOOL NOT NULL)
BEGIN
  DECLARE schema_crc LONG INTEGER NOT NULL;

  -- create schema facets information table --
  CALL test_create_cql_schema_facets_if_needed();

  -- fetch the last known schema crc, if it's different do the upgrade --
  CALL test_cql_get_facet_version('cql_schema_crc', schema_crc);

  IF schema_crc <> 9110227700131655447 THEN
    BEGIN TRY
      CALL test_setup_facets();
      CALL test_perform_needed_upgrades(include_virtual_tables);
    END TRY;
    BEGIN CATCH
      SET test_facets := NULL;
      SET test_tables_dict_ := NULL;
      THROW;
    END CATCH;
    SET test_facets := NULL;
    SET test_tables_dict_ := NULL;
  ELSE
    -- some canonical result for no differences --
    SELECT 'no differences' facet;
  END IF;
  ---- install temp schema after upgrade is complete ----
  CALL test_cql_install_temp_schema();

END;

CREATE PROCEDURE test()
BEGIN
  CALL test_helper(TRUE);
END;

CREATE PROCEDURE test_no_virtual_tables()
BEGIN
  CALL test_helper(FALSE);
END;

