
DECLARE SELECT FUNC filter_ (id INTEGER) INTEGER NOT NULL;

@DECLARE_SCHEMA_REGION shared;

@DECLARE_SCHEMA_REGION extra USING shared;

@DECLARE_SCHEMA_REGION other;

@begin_schema_region shared;
CREATE TABLE foo(
  id INTEGER PRIMARY KEY,
  rate LONG_INT @DELETE(5),
  rate_2 LONG_INT @DELETE(4, DeleteRate2Proc),
  id2 INTEGER DEFAULT 12345 @CREATE(4, CreateId2Proc),
  name TEXT @CREATE(5),
  name_2 TEXT @CREATE(6)
);
@end_schema_region;

@begin_schema_region shared;
CREATE TABLE added_table(
  id INTEGER NOT NULL,
  name1 TEXT,
  name2 TEXT @CREATE(4)
) @CREATE(3) @DELETE(5);
@end_schema_region;

@begin_schema_region shared;
CREATE TABLE g1(
  id INTEGER PRIMARY KEY,
  name TEXT
) @RECREATE(gr1);
@end_schema_region;

@begin_schema_region shared;
CREATE TABLE use_g1(
  id INTEGER PRIMARY KEY REFERENCES g1 (id),
  name2 TEXT
) @RECREATE(gr1);
@end_schema_region;

@begin_schema_region extra;
CREATE TABLE table2(
  id INTEGER NOT NULL REFERENCES foo (id),
  name1 TEXT @CREATE(2, CreateName1Proc),
  name2 TEXT @CREATE(2, CreateName2Proc),
  name3 TEXT @CREATE(2),
  name4 TEXT @CREATE(2)
);
@end_schema_region;

@begin_schema_region other;
CREATE TABLE other_table(
  id INTEGER
);
@end_schema_region;

CREATE TABLE table_to_recreate(
  id INTEGER NOT NULL,
  name TEXT
) @RECREATE;

CREATE TABLE grouped_table_1(
  id INTEGER NOT NULL,
  name TEXT
) @RECREATE(my_group);

CREATE TABLE grouped_table_2(
  id INTEGER NOT NULL,
  name TEXT
) @RECREATE(my_group);

CREATE TABLE grouped_table_3(
  id INTEGER NOT NULL,
  name TEXT
) @RECREATE(my_group);

CREATE TABLE t5(
  id LONG_INT PRIMARY KEY AUTOINCREMENT,
  data TEXT
);

CREATE TABLE t6(
  id LONG_INT PRIMARY KEY,
  FOREIGN KEY (id) REFERENCES t5 (id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE VIRTUAL TABLE a_virtual_table USING a_module (this, that, the_other) AS (
  id INTEGER @SENSITIVE,
  t TEXT
);

CREATE VIRTUAL TABLE @EPONYMOUS epon USING epon AS (
  id INTEGER @SENSITIVE,
  t TEXT
);

CREATE VIRTUAL TABLE complex_virtual_table USING a_module (ARGUMENTS FOLLOWING) AS (
  id INTEGER @SENSITIVE,
  t TEXT
);

CREATE VIRTUAL TABLE deleted_virtual_table USING a_module (ARGUMENTS FOLLOWING) AS (
  id INTEGER @SENSITIVE,
  t TEXT
) @DELETE(4, cql:module_must_not_be_deleted_see_docs_for_CQL0392);

CREATE TABLE migrated_from_recreate(
  id INTEGER,
  t TEXT
) @CREATE(4, cql:from_recreate);

CREATE TABLE conflict_clause_t(
  id INTEGER NOT NULL ON CONFLICT FAIL
);

CREATE TABLE conflict_clause_pk(
  id INTEGER NOT NULL,
  CONSTRAINT pk1 PRIMARY KEY (id) ON CONFLICT ROLLBACK
);

CREATE TABLE expression_pk(
  id INTEGER NOT NULL,
  CONSTRAINT pk1 PRIMARY KEY (id / 2, id % 2)
);

CREATE TABLE expression_uk(
  id INTEGER NOT NULL,
  CONSTRAINT uk1 UNIQUE (id / 2, id % 2)
);

CREATE TABLE delete__second(
  id INTEGER PRIMARY KEY
) @DELETE(7);

CREATE TABLE delete_first(
  id INTEGER REFERENCES delete__second (id)
) @DELETE(7);

CREATE TABLE create_first(
  id INTEGER PRIMARY KEY
) @CREATE(7);

CREATE TABLE create__second(
  id INTEGER REFERENCES create_first (id)
) @CREATE(7);

@begin_schema_region shared;
CREATE VIEW shared_view AS
SELECT *
  FROM foo;
@end_schema_region;

@begin_schema_region shared;
CREATE VIEW live_view AS
SELECT *
  FROM foo;
@end_schema_region;

@begin_schema_region shared;
CREATE VIEW dead_view AS
SELECT *
  FROM foo @DELETE(2, DeadViewMigration);
@end_schema_region;

@begin_schema_region extra;
CREATE VIEW another_live_view AS
SELECT *
  FROM table2;
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX shared_index ON foo (name, name_2);
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX gr1_index ON g1 (name);
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX gr1_index2 ON g1 (name, id);
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX gr1_index3 ON g1 (name, id) @DELETE(5);
@end_schema_region;

@begin_schema_region extra;
CREATE INDEX not_shared_present_index ON table2 (name1, name2);
@end_schema_region;

@begin_schema_region extra;
CREATE INDEX index_going_away ON table2 (name3) @DELETE(3);
@end_schema_region;

@begin_schema_region shared;
CREATE TRIGGER shared_trigger
  BEFORE INSERT ON foo
BEGIN
SELECT 1;
END;
@end_schema_region;

@begin_schema_region extra;
CREATE TRIGGER not_shared_trigger
  BEFORE INSERT ON foo
BEGIN
SELECT new.id;
END;
@end_schema_region;

@begin_schema_region shared;
CREATE TRIGGER insert_trigger
  BEFORE INSERT ON foo
  FOR EACH ROW
  WHEN new.id > 7
BEGIN
SELECT new.id;
END;
@end_schema_region;

@begin_schema_region shared;
CREATE TRIGGER old_trigger_was_deleted
  BEFORE INSERT ON foo
BEGIN
SELECT new.id;
END @DELETE(3);
@end_schema_region;

CREATE TRIGGER trig_with_filter
  BEFORE INSERT ON foo
  WHEN filter_(new.id) = 3
BEGIN
DELETE FROM foo WHERE id = 77;
END;

@begin_schema_region shared;
@SCHEMA_AD_HOC_MIGRATION(5, MyAdHocMigrationScript);
@end_schema_region;

