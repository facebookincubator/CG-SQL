#pragma once

#include "cqlrt.h"


// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern cql_nullable_int32 i0_nullable;

// The statement ending at line XXXX
extern cql_nullable_int32 i1_nullable;

// The statement ending at line XXXX
extern cql_nullable_double r0_nullable;

// The statement ending at line XXXX
extern cql_nullable_int64 l0_nullable;

// The statement ending at line XXXX
extern cql_nullable_int64 l1_nullable;

// The statement ending at line XXXX
extern cql_nullable_bool b0_nullable;

// The statement ending at line XXXX
extern cql_string_ref _Nullable t0_nullable;

// The statement ending at line XXXX
extern cql_int32 i2;

// The statement ending at line XXXX
extern cql_double r2;

// The statement ending at line XXXX
extern cql_int64 l2;

// The statement ending at line XXXX
extern cql_bool b2;

// The statement ending at line XXXX
extern cql_string_ref _Nonnull t2;

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern cql_nullable_int32 side_effect1(void);

// The statement ending at line XXXX
extern cql_nullable_int32 side_effect2(void);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern void test(cql_int32 i);

// The statement ending at line XXXX
extern void proc_with_return_guard(cql_nullable_int32 a);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern void out_test(cql_int32 *_Nonnull i, cql_nullable_int32 *_Nonnull ii);

// The statement ending at line XXXX
extern cql_nullable_int64 longint_var;

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern cql_nullable_int32 col1;

// The statement ending at line XXXX
extern cql_double col2;

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern cql_int32 arg1;

// The statement ending at line XXXX
extern cql_int32 arg2;

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code outparm_test(sqlite3 *_Nonnull _db_, cql_int32 *_Nonnull foo);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code throwing(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
#define CRC_with_result_set -8462755000888307759L

extern cql_string_ref _Nonnull with_result_set_stored_procedure_name;

#define with_result_set_data_types_count 5

#ifndef result_set_type_decl_with_result_set_result_set
#define result_set_type_decl_with_result_set_result_set 1
cql_result_set_type_decl(with_result_set_result_set, with_result_set_result_set_ref);
#endif
extern cql_int32 with_result_set_get_id(with_result_set_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nullable with_result_set_get_name(with_result_set_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool with_result_set_get_rate_is_null(with_result_set_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int64 with_result_set_get_rate_value(with_result_set_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool with_result_set_get_type_is_null(with_result_set_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 with_result_set_get_type_value(with_result_set_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool with_result_set_get_size_is_null(with_result_set_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double with_result_set_get_size_value(with_result_set_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 with_result_set_result_count(with_result_set_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code with_result_set_fetch_results(sqlite3 *_Nonnull _db_, with_result_set_result_set_ref _Nullable *_Nonnull result_set);
#define with_result_set_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define with_result_set_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_select_from_view 1538727920194423091L

extern cql_string_ref _Nonnull select_from_view_stored_procedure_name;

#define select_from_view_data_types_count 2

#ifndef result_set_type_decl_select_from_view_result_set
#define result_set_type_decl_select_from_view_result_set 1
cql_result_set_type_decl(select_from_view_result_set, select_from_view_result_set_ref);
#endif
extern cql_int32 select_from_view_get_id(select_from_view_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool select_from_view_get_type_is_null(select_from_view_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 select_from_view_get_type_value(select_from_view_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 select_from_view_result_count(select_from_view_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code select_from_view_fetch_results(sqlite3 *_Nonnull _db_, select_from_view_result_set_ref _Nullable *_Nonnull result_set);
#define select_from_view_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define select_from_view_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code make_view(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code make_index(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
#define CRC_get_data -1330313969999978982L

extern cql_string_ref _Nonnull get_data_stored_procedure_name;

#define get_data_data_types_count 5

#ifndef result_set_type_decl_get_data_result_set
#define result_set_type_decl_get_data_result_set 1
cql_result_set_type_decl(get_data_result_set, get_data_result_set_ref);
#endif
extern cql_int32 get_data_get_id(get_data_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nullable get_data_get_name(get_data_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool get_data_get_rate_is_null(get_data_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int64 get_data_get_rate_value(get_data_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool get_data_get_type_is_null(get_data_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 get_data_get_type_value(get_data_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool get_data_get_size_is_null(get_data_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double get_data_get_size_value(get_data_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 get_data_result_count(get_data_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code get_data_fetch_results(sqlite3 *_Nonnull _db_, get_data_result_set_ref _Nullable *_Nonnull result_set, cql_string_ref _Nonnull name_, cql_int32 id_);
#define get_data_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define get_data_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code easy_fetch(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern void copy_int(cql_nullable_int32 a, cql_nullable_int32 *_Nonnull b);

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code insert_rowid_reader(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code changes_reader(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern cql_string_ref _Nonnull s;

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code xyzzy_test(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX

// The statement ending at line XXXX
#define CRC_complex_return 8153353821257004813L

extern cql_string_ref _Nonnull complex_return_stored_procedure_name;

#define complex_return_data_types_count 6

#ifndef result_set_type_decl_complex_return_result_set
#define result_set_type_decl_complex_return_result_set 1
cql_result_set_type_decl(complex_return_result_set, complex_return_result_set_ref);
#endif
extern cql_bool complex_return_get__bool(complex_return_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 complex_return_get__integer(complex_return_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int64 complex_return_get__longint(complex_return_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double complex_return_get__real(complex_return_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nonnull complex_return_get__text(complex_return_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool complex_return_get__nullable_bool_is_null(complex_return_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool complex_return_get__nullable_bool_value(complex_return_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 complex_return_result_count(complex_return_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code complex_return_fetch_results(sqlite3 *_Nonnull _db_, complex_return_result_set_ref _Nullable *_Nonnull result_set);
#define complex_return_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define complex_return_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_hierarchical_query -2548306388193447686L

extern cql_string_ref _Nonnull hierarchical_query_stored_procedure_name;

#define hierarchical_query_data_types_count 1

#ifndef result_set_type_decl_hierarchical_query_result_set
#define result_set_type_decl_hierarchical_query_result_set 1
cql_result_set_type_decl(hierarchical_query_result_set, hierarchical_query_result_set_ref);
#endif
extern cql_int32 hierarchical_query_get_id(hierarchical_query_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 hierarchical_query_result_count(hierarchical_query_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code hierarchical_query_fetch_results(sqlite3 *_Nonnull _db_, hierarchical_query_result_set_ref _Nullable *_Nonnull result_set, cql_int64 rate_, cql_int32 limit_, cql_int32 offset_);
#define hierarchical_query_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define hierarchical_query_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_hierarchical_unmatched_query -3803198157393737800L

extern cql_string_ref _Nonnull hierarchical_unmatched_query_stored_procedure_name;

#define hierarchical_unmatched_query_data_types_count 1

#ifndef result_set_type_decl_hierarchical_unmatched_query_result_set
#define result_set_type_decl_hierarchical_unmatched_query_result_set 1
cql_result_set_type_decl(hierarchical_unmatched_query_result_set, hierarchical_unmatched_query_result_set_ref);
#endif
extern cql_int32 hierarchical_unmatched_query_get_id(hierarchical_unmatched_query_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 hierarchical_unmatched_query_result_count(hierarchical_unmatched_query_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code hierarchical_unmatched_query_fetch_results(sqlite3 *_Nonnull _db_, hierarchical_unmatched_query_result_set_ref _Nullable *_Nonnull result_set, cql_int64 rate_, cql_int32 limit_, cql_int32 offset_);
#define hierarchical_unmatched_query_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define hierarchical_unmatched_query_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_union_select -7442745365923835667L

extern cql_string_ref _Nonnull union_select_stored_procedure_name;

#define union_select_data_types_count 1

#ifndef result_set_type_decl_union_select_result_set
#define result_set_type_decl_union_select_result_set 1
cql_result_set_type_decl(union_select_result_set, union_select_result_set_ref);
#endif
extern cql_int32 union_select_get_A(union_select_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 union_select_result_count(union_select_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code union_select_fetch_results(sqlite3 *_Nonnull _db_, union_select_result_set_ref _Nullable *_Nonnull result_set);
#define union_select_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define union_select_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_union_all_select -8038533317083411538L

extern cql_string_ref _Nonnull union_all_select_stored_procedure_name;

#define union_all_select_data_types_count 1

#ifndef result_set_type_decl_union_all_select_result_set
#define result_set_type_decl_union_all_select_result_set 1
cql_result_set_type_decl(union_all_select_result_set, union_all_select_result_set_ref);
#endif
extern cql_int32 union_all_select_get_A(union_all_select_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 union_all_select_result_count(union_all_select_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code union_all_select_fetch_results(sqlite3 *_Nonnull _db_, union_all_select_result_set_ref _Nullable *_Nonnull result_set);
#define union_all_select_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define union_all_select_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_union_all_with_nullable -7529651333981875221L

extern cql_string_ref _Nonnull union_all_with_nullable_stored_procedure_name;

#define union_all_with_nullable_data_types_count 1

#ifndef result_set_type_decl_union_all_with_nullable_result_set
#define result_set_type_decl_union_all_with_nullable_result_set 1
cql_result_set_type_decl(union_all_with_nullable_result_set, union_all_with_nullable_result_set_ref);
#endif
extern cql_string_ref _Nullable union_all_with_nullable_get_name(union_all_with_nullable_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 union_all_with_nullable_result_count(union_all_with_nullable_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code union_all_with_nullable_fetch_results(sqlite3 *_Nonnull _db_, union_all_with_nullable_result_set_ref _Nullable *_Nonnull result_set);
#define union_all_with_nullable_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define union_all_with_nullable_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code with_stmt_using_cursor(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
#define CRC_with_stmt 4334962548519502302L

extern cql_string_ref _Nonnull with_stmt_stored_procedure_name;

#define with_stmt_data_types_count 3

#ifndef result_set_type_decl_with_stmt_result_set
#define result_set_type_decl_with_stmt_result_set 1
cql_result_set_type_decl(with_stmt_result_set, with_stmt_result_set_ref);
#endif
extern cql_int32 with_stmt_get_a(with_stmt_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 with_stmt_get_b(with_stmt_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 with_stmt_get_c(with_stmt_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 with_stmt_result_count(with_stmt_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code with_stmt_fetch_results(sqlite3 *_Nonnull _db_, with_stmt_result_set_ref _Nullable *_Nonnull result_set);
#define with_stmt_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define with_stmt_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_with_recursive_stmt -6110972863628360529L

extern cql_string_ref _Nonnull with_recursive_stmt_stored_procedure_name;

#define with_recursive_stmt_data_types_count 3

#ifndef result_set_type_decl_with_recursive_stmt_result_set
#define result_set_type_decl_with_recursive_stmt_result_set 1
cql_result_set_type_decl(with_recursive_stmt_result_set, with_recursive_stmt_result_set_ref);
#endif
extern cql_int32 with_recursive_stmt_get_a(with_recursive_stmt_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 with_recursive_stmt_get_b(with_recursive_stmt_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 with_recursive_stmt_get_c(with_recursive_stmt_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 with_recursive_stmt_result_count(with_recursive_stmt_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code with_recursive_stmt_fetch_results(sqlite3 *_Nonnull _db_, with_recursive_stmt_result_set_ref _Nullable *_Nonnull result_set);
#define with_recursive_stmt_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define with_recursive_stmt_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_parent_proc -4084833990162251007L

extern cql_string_ref _Nonnull parent_proc_stored_procedure_name;

#define parent_proc_data_types_count 3

#ifndef result_set_type_decl_parent_proc_result_set
#define result_set_type_decl_parent_proc_result_set 1
cql_result_set_type_decl(parent_proc_result_set, parent_proc_result_set_ref);
#endif
extern cql_int32 parent_proc_get_one(parent_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 parent_proc_get_two(parent_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 parent_proc_get_three(parent_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 parent_proc_result_count(parent_proc_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code parent_proc_fetch_results(sqlite3 *_Nonnull _db_, parent_proc_result_set_ref _Nullable *_Nonnull result_set);
#define parent_proc_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define parent_proc_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_parent_proc_child 5714243254880406781L

extern cql_string_ref _Nonnull parent_proc_child_stored_procedure_name;

#define parent_proc_child_data_types_count 3

#ifndef result_set_type_decl_parent_proc_child_result_set
#define result_set_type_decl_parent_proc_child_result_set 1
cql_result_set_type_decl(parent_proc_child_result_set, parent_proc_child_result_set_ref);
#endif
extern cql_int32 parent_proc_child_get_four(parent_proc_child_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 parent_proc_child_get_five(parent_proc_child_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 parent_proc_child_get_six(parent_proc_child_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 parent_proc_child_result_count(parent_proc_child_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code parent_proc_child_fetch_results(sqlite3 *_Nonnull _db_, parent_proc_child_result_set_ref _Nullable *_Nonnull result_set);
#define parent_proc_child_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define parent_proc_child_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code outint_nullable(sqlite3 *_Nonnull _db_, cql_nullable_int32 *_Nonnull output, cql_bool *_Nonnull result);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code outint_notnull(sqlite3 *_Nonnull _db_, cql_int32 *_Nonnull output, cql_bool *_Nonnull result);

// The statement ending at line XXXX
extern cql_nullable_int32 simple_func(cql_nullable_int32 int1);

// The statement ending at line XXXX
extern cql_nullable_int32 result;

// The statement ending at line XXXX

// The statement ending at line XXXX
extern cql_string_ref _Nonnull text_func(cql_nullable_int32 int1, cql_int32 int2);

// The statement ending at line XXXX
extern cql_string_ref _Nullable text_result;

// The statement ending at line XXXX

// The statement ending at line XXXX
extern cql_object_ref _Nullable obj_var;

// The statement ending at line XXXX

// The statement ending at line XXXX
extern cql_object_ref _Nonnull obj_var2;

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern void obj_proc(cql_object_ref _Nullable *_Nonnull an_object);

// The statement ending at line XXXX
#define CRC_cursor_with_object -3278989848261056143L

extern cql_string_ref _Nonnull cursor_with_object_stored_procedure_name;

#define cursor_with_object_data_types_count 1

#ifndef result_set_type_decl_cursor_with_object_result_set
#define result_set_type_decl_cursor_with_object_result_set 1
cql_result_set_type_decl(cursor_with_object_result_set, cursor_with_object_result_set_ref);
#endif
extern cql_object_ref _Nullable cursor_with_object_get_object_(cursor_with_object_result_set_ref _Nonnull result_set);
extern cql_int32 cursor_with_object_result_count(cursor_with_object_result_set_ref _Nonnull result_set);
extern void cursor_with_object_fetch_results( cursor_with_object_result_set_ref _Nullable *_Nonnull result_set, cql_object_ref _Nullable object_);
#define cursor_with_object_hash(result_set) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), 0)
#define cursor_with_object_equal(rs1, rs2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  0, \
  (cql_result_set_ref)(rs2), \
  0)

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern cql_object_ref _Nullable obj_func(void);

// The statement ending at line XXXX

// The statement ending at line XXXX
extern cql_object_ref _Nullable obj_func_create(void);

// The statement ending at line XXXX

// The statement ending at line XXXX
extern cql_string_ref _Nullable text_func_create(void);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern void unused_temp(cql_nullable_int32 i, cql_int32 *_Nonnull o);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern void echo_test(void);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code insert_values(sqlite3 *_Nonnull _db_, cql_int32 id_, cql_nullable_int32 type_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code alter_table_test(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code drop_table_test(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
#define CRC_uses_proc_for_result -9152262322045682524L

extern cql_string_ref _Nonnull uses_proc_for_result_stored_procedure_name;

#define uses_proc_for_result_data_types_count 5

#ifndef result_set_type_decl_uses_proc_for_result_result_set
#define result_set_type_decl_uses_proc_for_result_result_set 1
cql_result_set_type_decl(uses_proc_for_result_result_set, uses_proc_for_result_result_set_ref);
#endif
extern cql_int32 uses_proc_for_result_get_id(uses_proc_for_result_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nullable uses_proc_for_result_get_name(uses_proc_for_result_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool uses_proc_for_result_get_rate_is_null(uses_proc_for_result_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int64 uses_proc_for_result_get_rate_value(uses_proc_for_result_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool uses_proc_for_result_get_type_is_null(uses_proc_for_result_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 uses_proc_for_result_get_type_value(uses_proc_for_result_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool uses_proc_for_result_get_size_is_null(uses_proc_for_result_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double uses_proc_for_result_get_size_value(uses_proc_for_result_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 uses_proc_for_result_result_count(uses_proc_for_result_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code uses_proc_for_result_fetch_results(sqlite3 *_Nonnull _db_, uses_proc_for_result_result_set_ref _Nullable *_Nonnull result_set);
#define uses_proc_for_result_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define uses_proc_for_result_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
extern cql_nullable_int32 voidfunc(void);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code index_dropper(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code misc_dml_proc(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code dummy_user(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern void proc_with_out_arg(cql_string_ref _Nullable *_Nonnull foo);

// The statement ending at line XXXX
extern void calls_out_proc(cql_string_ref _Nullable *_Nonnull foo);

// The statement ending at line XXXX
extern cql_blob_ref _Nullable blob_var;

// The statement ending at line XXXX
extern cql_blob_ref _Nonnull blob_var2;

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern void blob_proc(cql_blob_ref _Nullable *_Nonnull a_blob);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern cql_blob_ref _Nullable blob_func(void);

// The statement ending at line XXXX

// The statement ending at line XXXX
extern cql_blob_ref _Nullable blob_func_create(void);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern cql_blob_ref _Nonnull blob_var_notnull;

// The statement ending at line XXXX

// The statement ending at line XXXX
#define CRC_blob_returner 3241832673956482800L

extern cql_string_ref _Nonnull blob_returner_stored_procedure_name;

#define blob_returner_data_types_count 3

#ifndef result_set_type_decl_blob_returner_result_set
#define result_set_type_decl_blob_returner_result_set 1
cql_result_set_type_decl(blob_returner_result_set, blob_returner_result_set_ref);
#endif
extern cql_int32 blob_returner_get_blob_id(blob_returner_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_blob_ref _Nonnull blob_returner_get_b_notnull(blob_returner_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_blob_ref _Nullable blob_returner_get_b_nullable(blob_returner_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 blob_returner_result_count(blob_returner_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code blob_returner_fetch_results(sqlite3 *_Nonnull _db_, blob_returner_result_set_ref _Nullable *_Nonnull result_set);
#define blob_returner_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define blob_returner_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX

// The statement ending at line XXXX
extern void voidproc(void);

// The statement ending at line XXXX
#define CRC_out_cursor_proc -7895376640878571837L

extern cql_string_ref _Nonnull out_cursor_proc_stored_procedure_name;

#define out_cursor_proc_data_types_count 7

#ifndef result_set_type_decl_out_cursor_proc_result_set
#define result_set_type_decl_out_cursor_proc_result_set 1
cql_result_set_type_decl(out_cursor_proc_result_set, out_cursor_proc_result_set_ref);
#endif
extern cql_int32 out_cursor_proc_get_id(out_cursor_proc_result_set_ref _Nonnull result_set);
extern cql_string_ref _Nullable out_cursor_proc_get_name(out_cursor_proc_result_set_ref _Nonnull result_set);
extern cql_bool out_cursor_proc_get_rate_is_null(out_cursor_proc_result_set_ref _Nonnull result_set);
extern cql_int64 out_cursor_proc_get_rate_value(out_cursor_proc_result_set_ref _Nonnull result_set);
extern cql_bool out_cursor_proc_get_type_is_null(out_cursor_proc_result_set_ref _Nonnull result_set);
extern cql_int32 out_cursor_proc_get_type_value(out_cursor_proc_result_set_ref _Nonnull result_set);
extern cql_bool out_cursor_proc_get_size_is_null(out_cursor_proc_result_set_ref _Nonnull result_set);
extern cql_double out_cursor_proc_get_size_value(out_cursor_proc_result_set_ref _Nonnull result_set);
extern cql_string_ref _Nonnull out_cursor_proc_get_extra1(out_cursor_proc_result_set_ref _Nonnull result_set);
extern cql_string_ref _Nonnull out_cursor_proc_get_extra2(out_cursor_proc_result_set_ref _Nonnull result_set);
extern cql_int32 out_cursor_proc_result_count(out_cursor_proc_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code out_cursor_proc_fetch_results(sqlite3 *_Nonnull _db_, out_cursor_proc_result_set_ref _Nullable *_Nonnull result_set);
#define out_cursor_proc_hash(result_set) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), 0)
#define out_cursor_proc_equal(rs1, rs2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  0, \
  (cql_result_set_ref)(rs2), \
  0)

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code read_cursor_proc(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code declare_cursor_then_fetch_from_proc(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code dml_user(sqlite3 *_Nonnull _db_, cql_int32 *_Nonnull a_);

// The statement ending at line XXXX
#define CRC_thread_theme_info_list -4641848489331687415L

extern cql_string_ref _Nonnull thread_theme_info_list_stored_procedure_name;

#define thread_theme_info_list_data_types_count 1

#ifndef result_set_type_decl_thread_theme_info_list_result_set
#define result_set_type_decl_thread_theme_info_list_result_set 1
cql_result_set_type_decl(thread_theme_info_list_result_set, thread_theme_info_list_result_set_ref);
#endif
extern cql_int64 thread_theme_info_list_get_thread_key(thread_theme_info_list_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 thread_theme_info_list_result_count(thread_theme_info_list_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code thread_theme_info_list_fetch_results(sqlite3 *_Nonnull _db_, thread_theme_info_list_result_set_ref _Nullable *_Nonnull result_set, cql_int64 thread_key_);
#define thread_theme_info_list_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define thread_theme_info_list_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
extern void fetch_values_dummy(void);

// The statement ending at line XXXX
extern void c_literal(cql_string_ref _Nullable *_Nonnull x);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code no_cleanup_label_needed_proc(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code no_code_after_catch(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
#define CRC_out_no_db 6405231635538004839L

extern cql_string_ref _Nonnull out_no_db_stored_procedure_name;

#define out_no_db_data_types_count 2

#ifndef result_set_type_decl_out_no_db_result_set
#define result_set_type_decl_out_no_db_result_set 1
cql_result_set_type_decl(out_no_db_result_set, out_no_db_result_set_ref);
#endif
extern cql_int32 out_no_db_get_A(out_no_db_result_set_ref _Nonnull result_set);
extern cql_double out_no_db_get_B(out_no_db_result_set_ref _Nonnull result_set);
extern cql_int32 out_no_db_result_count(out_no_db_result_set_ref _Nonnull result_set);
extern void out_no_db_fetch_results( out_no_db_result_set_ref _Nullable *_Nonnull result_set);
#define out_no_db_hash(result_set) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), 0)
#define out_no_db_equal(rs1, rs2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  0, \
  (cql_result_set_ref)(rs2), \
  0)

// The statement ending at line XXXX
#define CRC_declare_cursor_like_cursor 6877362305148286669L

extern cql_string_ref _Nonnull declare_cursor_like_cursor_stored_procedure_name;

#define declare_cursor_like_cursor_data_types_count 2

#ifndef result_set_type_decl_declare_cursor_like_cursor_result_set
#define result_set_type_decl_declare_cursor_like_cursor_result_set 1
cql_result_set_type_decl(declare_cursor_like_cursor_result_set, declare_cursor_like_cursor_result_set_ref);
#endif
extern cql_int32 declare_cursor_like_cursor_get_A(declare_cursor_like_cursor_result_set_ref _Nonnull result_set);
extern cql_double declare_cursor_like_cursor_get_B(declare_cursor_like_cursor_result_set_ref _Nonnull result_set);
extern cql_int32 declare_cursor_like_cursor_result_count(declare_cursor_like_cursor_result_set_ref _Nonnull result_set);
extern void declare_cursor_like_cursor_fetch_results( declare_cursor_like_cursor_result_set_ref _Nullable *_Nonnull result_set);
#define declare_cursor_like_cursor_hash(result_set) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), 0)
#define declare_cursor_like_cursor_equal(rs1, rs2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  0, \
  (cql_result_set_ref)(rs2), \
  0)

// The statement ending at line XXXX
#define CRC_declare_cursor_like_proc -7347092251664083859L

extern cql_string_ref _Nonnull declare_cursor_like_proc_stored_procedure_name;

#define declare_cursor_like_proc_data_types_count 2

#ifndef result_set_type_decl_declare_cursor_like_proc_result_set
#define result_set_type_decl_declare_cursor_like_proc_result_set 1
cql_result_set_type_decl(declare_cursor_like_proc_result_set, declare_cursor_like_proc_result_set_ref);
#endif
extern cql_bool declare_cursor_like_proc_get_a_is_null(declare_cursor_like_proc_result_set_ref _Nonnull result_set);
extern cql_int32 declare_cursor_like_proc_get_a_value(declare_cursor_like_proc_result_set_ref _Nonnull result_set);
extern cql_string_ref _Nullable declare_cursor_like_proc_get_b(declare_cursor_like_proc_result_set_ref _Nonnull result_set);
extern cql_int32 declare_cursor_like_proc_result_count(declare_cursor_like_proc_result_set_ref _Nonnull result_set);
extern void declare_cursor_like_proc_fetch_results( declare_cursor_like_proc_result_set_ref _Nullable *_Nonnull result_set);
#define declare_cursor_like_proc_hash(result_set) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), 0)
#define declare_cursor_like_proc_equal(rs1, rs2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  0, \
  (cql_result_set_ref)(rs2), \
  0)

// The statement ending at line XXXX
#define CRC_declare_cursor_like_table -1889008868386577987L

extern cql_string_ref _Nonnull declare_cursor_like_table_stored_procedure_name;

#define declare_cursor_like_table_data_types_count 5

#ifndef result_set_type_decl_declare_cursor_like_table_result_set
#define result_set_type_decl_declare_cursor_like_table_result_set 1
cql_result_set_type_decl(declare_cursor_like_table_result_set, declare_cursor_like_table_result_set_ref);
#endif
extern cql_int32 declare_cursor_like_table_get_id(declare_cursor_like_table_result_set_ref _Nonnull result_set);
extern cql_string_ref _Nullable declare_cursor_like_table_get_name(declare_cursor_like_table_result_set_ref _Nonnull result_set);
extern cql_bool declare_cursor_like_table_get_rate_is_null(declare_cursor_like_table_result_set_ref _Nonnull result_set);
extern cql_int64 declare_cursor_like_table_get_rate_value(declare_cursor_like_table_result_set_ref _Nonnull result_set);
extern cql_bool declare_cursor_like_table_get_type_is_null(declare_cursor_like_table_result_set_ref _Nonnull result_set);
extern cql_int32 declare_cursor_like_table_get_type_value(declare_cursor_like_table_result_set_ref _Nonnull result_set);
extern cql_bool declare_cursor_like_table_get_size_is_null(declare_cursor_like_table_result_set_ref _Nonnull result_set);
extern cql_double declare_cursor_like_table_get_size_value(declare_cursor_like_table_result_set_ref _Nonnull result_set);
extern cql_int32 declare_cursor_like_table_result_count(declare_cursor_like_table_result_set_ref _Nonnull result_set);
extern void declare_cursor_like_table_fetch_results( declare_cursor_like_table_result_set_ref _Nullable *_Nonnull result_set);
#define declare_cursor_like_table_hash(result_set) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), 0)
#define declare_cursor_like_table_equal(rs1, rs2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  0, \
  (cql_result_set_ref)(rs2), \
  0)

// The statement ending at line XXXX
#define CRC_declare_cursor_like_view -5701296118673669415L

extern cql_string_ref _Nonnull declare_cursor_like_view_stored_procedure_name;

#define declare_cursor_like_view_data_types_count 3

#ifndef result_set_type_decl_declare_cursor_like_view_result_set
#define result_set_type_decl_declare_cursor_like_view_result_set 1
cql_result_set_type_decl(declare_cursor_like_view_result_set, declare_cursor_like_view_result_set_ref);
#endif
extern cql_int32 declare_cursor_like_view_get_f1(declare_cursor_like_view_result_set_ref _Nonnull result_set);
extern cql_int32 declare_cursor_like_view_get_f2(declare_cursor_like_view_result_set_ref _Nonnull result_set);
extern cql_int32 declare_cursor_like_view_get_f3(declare_cursor_like_view_result_set_ref _Nonnull result_set);
extern cql_int32 declare_cursor_like_view_result_count(declare_cursor_like_view_result_set_ref _Nonnull result_set);
extern void declare_cursor_like_view_fetch_results( declare_cursor_like_view_result_set_ref _Nullable *_Nonnull result_set);
#define declare_cursor_like_view_hash(result_set) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), 0)
#define declare_cursor_like_view_equal(rs1, rs2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  0, \
  (cql_result_set_ref)(rs2), \
  0)

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code weird_quoting(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code long_auto_table_maker(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX

// The statement ending at line XXXX
extern void blob_call1(void);

// The statement ending at line XXXX
extern void blob_call2(void);

// The statement ending at line XXXX
extern void blob_no_else(void);

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code with_inserter(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code multi_rewrite(sqlite3 *_Nonnull _db_, cql_int32 blob_id_, cql_blob_ref _Nonnull b_notnull_, cql_blob_ref _Nullable b_nullable_, cql_int32 id_, cql_string_ref _Nullable name_, cql_nullable_int64 rate_, cql_nullable_int32 type_, cql_nullable_double size_, cql_int32 *_Nonnull out_arg);

// The statement ending at line XXXX
#define CRC_fetch_to_cursor_from_cursor 2469333203870699311L

extern cql_string_ref _Nonnull fetch_to_cursor_from_cursor_stored_procedure_name;

#define fetch_to_cursor_from_cursor_data_types_count 2

#ifndef result_set_type_decl_fetch_to_cursor_from_cursor_result_set
#define result_set_type_decl_fetch_to_cursor_from_cursor_result_set 1
cql_result_set_type_decl(fetch_to_cursor_from_cursor_result_set, fetch_to_cursor_from_cursor_result_set_ref);
#endif
extern cql_int32 fetch_to_cursor_from_cursor_get_A(fetch_to_cursor_from_cursor_result_set_ref _Nonnull result_set);
extern cql_string_ref _Nonnull fetch_to_cursor_from_cursor_get_B(fetch_to_cursor_from_cursor_result_set_ref _Nonnull result_set);
extern cql_int32 fetch_to_cursor_from_cursor_result_count(fetch_to_cursor_from_cursor_result_set_ref _Nonnull result_set);
extern void fetch_to_cursor_from_cursor_fetch_results( fetch_to_cursor_from_cursor_result_set_ref _Nullable *_Nonnull result_set);
#define fetch_to_cursor_from_cursor_hash(result_set) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), 0)
#define fetch_to_cursor_from_cursor_equal(rs1, rs2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  0, \
  (cql_result_set_ref)(rs2), \
  0)

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code loop_statement_cursor(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code loop_statement_not_auto_cursor(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code call_in_loop(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code call_in_loop_with_nullable_condition(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code call_in_loop_boxed(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
#define CRC_out_union_helper 989908022872339462L

extern cql_string_ref _Nonnull out_union_helper_stored_procedure_name;

#define out_union_helper_data_types_count 1

#ifndef result_set_type_decl_out_union_helper_result_set
#define result_set_type_decl_out_union_helper_result_set 1
cql_result_set_type_decl(out_union_helper_result_set, out_union_helper_result_set_ref);
#endif
extern cql_int32 out_union_helper_get_x(out_union_helper_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 out_union_helper_result_count(out_union_helper_result_set_ref _Nonnull result_set);
#define out_union_helper_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define out_union_helper_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)
extern void out_union_helper_fetch_results(out_union_helper_result_set_ref _Nullable *_Nonnull _result_set_);

// The statement ending at line XXXX
#define CRC_out_union_dml_helper -160714497748671673L

extern cql_string_ref _Nonnull out_union_dml_helper_stored_procedure_name;

#define out_union_dml_helper_data_types_count 1

#ifndef result_set_type_decl_out_union_dml_helper_result_set
#define result_set_type_decl_out_union_dml_helper_result_set 1
cql_result_set_type_decl(out_union_dml_helper_result_set, out_union_dml_helper_result_set_ref);
#endif
extern cql_int32 out_union_dml_helper_get_x(out_union_dml_helper_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 out_union_dml_helper_result_count(out_union_dml_helper_result_set_ref _Nonnull result_set);
#define out_union_dml_helper_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define out_union_dml_helper_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)
extern CQL_WARN_UNUSED cql_code out_union_dml_helper_fetch_results(sqlite3 *_Nonnull _db_, out_union_dml_helper_result_set_ref _Nullable *_Nonnull _result_set_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code call_out_union_in_loop(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
#define CRC_forward_out_union 7569950227901156785L

extern cql_string_ref _Nonnull forward_out_union_stored_procedure_name;

#define forward_out_union_data_types_count 1

#ifndef result_set_type_decl_forward_out_union_result_set
#define result_set_type_decl_forward_out_union_result_set 1
cql_result_set_type_decl(forward_out_union_result_set, forward_out_union_result_set_ref);
#endif
extern cql_int32 forward_out_union_get_x(forward_out_union_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 forward_out_union_result_count(forward_out_union_result_set_ref _Nonnull result_set);
#define forward_out_union_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define forward_out_union_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)
extern void forward_out_union_fetch_results(forward_out_union_result_set_ref _Nullable *_Nonnull _result_set_);

// The statement ending at line XXXX

// The statement ending at line XXXX
#define CRC_forward_out_union_extern -5479089429828632085L

extern cql_string_ref _Nonnull forward_out_union_extern_stored_procedure_name;

#define forward_out_union_extern_data_types_count 1

#ifndef result_set_type_decl_forward_out_union_extern_result_set
#define result_set_type_decl_forward_out_union_extern_result_set 1
cql_result_set_type_decl(forward_out_union_extern_result_set, forward_out_union_extern_result_set_ref);
#endif
extern cql_int32 forward_out_union_extern_get_x(forward_out_union_extern_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 forward_out_union_extern_result_count(forward_out_union_extern_result_set_ref _Nonnull result_set);
#define forward_out_union_extern_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define forward_out_union_extern_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)
extern void forward_out_union_extern_fetch_results(forward_out_union_extern_result_set_ref _Nullable *_Nonnull _result_set_);

// The statement ending at line XXXX
#define CRC_forward_out_union_dml 2168239454489764896L

extern cql_string_ref _Nonnull forward_out_union_dml_stored_procedure_name;

#define forward_out_union_dml_data_types_count 1

#ifndef result_set_type_decl_forward_out_union_dml_result_set
#define result_set_type_decl_forward_out_union_dml_result_set 1
cql_result_set_type_decl(forward_out_union_dml_result_set, forward_out_union_dml_result_set_ref);
#endif
extern cql_int32 forward_out_union_dml_get_x(forward_out_union_dml_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 forward_out_union_dml_result_count(forward_out_union_dml_result_set_ref _Nonnull result_set);
#define forward_out_union_dml_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define forward_out_union_dml_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)
extern CQL_WARN_UNUSED cql_code forward_out_union_dml_fetch_results(sqlite3 *_Nonnull _db_, forward_out_union_dml_result_set_ref _Nullable *_Nonnull _result_set_);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code make_trigger(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern void is_test(void);

// The statement ending at line XXXX
extern void is_blob(void);

// The statement ending at line XXXX
extern void is_not_test(void);

// The statement ending at line XXXX
extern void in_test(cql_nullable_int32 x, cql_nullable_bool *_Nonnull b);

// The statement ending at line XXXX
extern void not_in_test(cql_nullable_int32 x, cql_nullable_bool *_Nonnull b);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code drop_trigger_test(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
#define CRC_simple_identity 336016010359056406L

extern cql_string_ref _Nonnull simple_identity_stored_procedure_name;

#define simple_identity_data_types_count 2

#ifndef result_set_type_decl_simple_identity_result_set
#define result_set_type_decl_simple_identity_result_set 1
cql_result_set_type_decl(simple_identity_result_set, simple_identity_result_set_ref);
#endif
extern cql_int32 simple_identity_get_id(simple_identity_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 simple_identity_get_data(simple_identity_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_uint16 simple_identity_identity_columns[];

extern cql_int32 simple_identity_result_count(simple_identity_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code simple_identity_fetch_results(sqlite3 *_Nonnull _db_, simple_identity_result_set_ref _Nullable *_Nonnull result_set);
#define simple_identity_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define simple_identity_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)
#define simple_identity_row_same(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsSame( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_complex_identity 26713709601603392L

extern cql_string_ref _Nonnull complex_identity_stored_procedure_name;

#define complex_identity_data_types_count 3

#ifndef result_set_type_decl_complex_identity_result_set
#define result_set_type_decl_complex_identity_result_set 1
cql_result_set_type_decl(complex_identity_result_set, complex_identity_result_set_ref);
#endif
extern cql_int32 complex_identity_get_col1(complex_identity_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 complex_identity_get_col2(complex_identity_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 complex_identity_get_data(complex_identity_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_uint16 complex_identity_identity_columns[];

extern cql_int32 complex_identity_result_count(complex_identity_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code complex_identity_fetch_results(sqlite3 *_Nonnull _db_, complex_identity_result_set_ref _Nullable *_Nonnull result_set);
#define complex_identity_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define complex_identity_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)
#define complex_identity_row_same(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsSame( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_out_cursor_identity 8497338404862860919L

extern cql_string_ref _Nonnull out_cursor_identity_stored_procedure_name;

#define out_cursor_identity_data_types_count 2

#ifndef result_set_type_decl_out_cursor_identity_result_set
#define result_set_type_decl_out_cursor_identity_result_set 1
cql_result_set_type_decl(out_cursor_identity_result_set, out_cursor_identity_result_set_ref);
#endif
extern cql_int32 out_cursor_identity_get_id(out_cursor_identity_result_set_ref _Nonnull result_set);
extern cql_int32 out_cursor_identity_get_data(out_cursor_identity_result_set_ref _Nonnull result_set);
extern cql_uint16 out_cursor_identity_identity_columns[];

extern cql_int32 out_cursor_identity_result_count(out_cursor_identity_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code out_cursor_identity_fetch_results(sqlite3 *_Nonnull _db_, out_cursor_identity_result_set_ref _Nullable *_Nonnull result_set);
#define out_cursor_identity_hash(result_set) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), 0)
#define out_cursor_identity_equal(rs1, rs2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  0, \
  (cql_result_set_ref)(rs2), \
  0)
#define out_cursor_identity_same(rs1, rs2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsSame( \
  (cql_result_set_ref)(rs1), \
  0, \
  (cql_result_set_ref)(rs2), \
  0)

// The statement ending at line XXXX
#define CRC_radioactive_proc -5485552865991672731L

extern cql_string_ref _Nonnull radioactive_proc_stored_procedure_name;

#define radioactive_proc_data_types_count 2

#ifndef result_set_type_decl_radioactive_proc_result_set
#define result_set_type_decl_radioactive_proc_result_set 1
cql_result_set_type_decl(radioactive_proc_result_set, radioactive_proc_result_set_ref);
#endif
extern cql_int32 radioactive_proc_get_id(radioactive_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nullable radioactive_proc_get_data(radioactive_proc_result_set_ref _Nonnull result_set, cql_int32 row);

#define radioactive_proc_get_data_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 1)
extern cql_int32 radioactive_proc_result_count(radioactive_proc_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code radioactive_proc_fetch_results(sqlite3 *_Nonnull _db_, radioactive_proc_result_set_ref _Nullable *_Nonnull result_set);
#define radioactive_proc_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define radioactive_proc_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

extern void radioactive_proc_set_encoding(cql_int32 col, cql_bool encode);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code with_deleter(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code with_updater(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
#define CRC_autodropper 1776998687585002437L

extern cql_string_ref _Nonnull autodropper_stored_procedure_name;

#define autodropper_data_types_count 2

#ifndef result_set_type_decl_autodropper_result_set
#define result_set_type_decl_autodropper_result_set 1
cql_result_set_type_decl(autodropper_result_set, autodropper_result_set_ref);
#endif
extern cql_int32 autodropper_get_a(autodropper_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 autodropper_get_b(autodropper_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 autodropper_result_count(autodropper_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code autodropper_fetch_results(sqlite3 *_Nonnull _db_, autodropper_result_set_ref _Nullable *_Nonnull result_set);
#define autodropper_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define autodropper_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX

#ifndef result_set_type_decl_core_result_set
#define result_set_type_decl_core_result_set 1
cql_result_set_type_decl(core_result_set, core_result_set_ref);
#endif
extern cql_int32 core_get_x(core_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nullable core_get_y(core_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool core_get_z_is_null(core_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int64 core_get_z_value(core_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 core_result_count(core_result_set_ref _Nonnull result_set);
#define core_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define core_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)
extern CQL_WARN_UNUSED cql_code core_fetch_results(sqlite3 *_Nonnull _db_, core_result_set_ref _Nullable *_Nonnull result_set, cql_int32 id_);

// The statement ending at line XXXX
#define CRC_simple_cursor_proc -6717012445748654937L

extern cql_string_ref _Nonnull simple_cursor_proc_stored_procedure_name;

#define simple_cursor_proc_data_types_count 1

#ifndef result_set_type_decl_simple_cursor_proc_result_set
#define result_set_type_decl_simple_cursor_proc_result_set 1
cql_result_set_type_decl(simple_cursor_proc_result_set, simple_cursor_proc_result_set_ref);
#endif
extern cql_int32 simple_cursor_proc_get_id(simple_cursor_proc_result_set_ref _Nonnull result_set);
extern cql_int32 simple_cursor_proc_result_count(simple_cursor_proc_result_set_ref _Nonnull result_set);
extern void simple_cursor_proc_fetch_results( simple_cursor_proc_result_set_ref _Nullable *_Nonnull result_set);
#define simple_cursor_proc_hash(result_set) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), 0)
#define simple_cursor_proc_equal(rs1, rs2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  0, \
  (cql_result_set_ref)(rs2), \
  0)

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
#define CRC_redundant_cast 3726092864985662652L

extern cql_string_ref _Nonnull redundant_cast_stored_procedure_name;

#define redundant_cast_data_types_count 2

#ifndef result_set_type_decl_redundant_cast_result_set
#define result_set_type_decl_redundant_cast_result_set 1
cql_result_set_type_decl(redundant_cast_result_set, redundant_cast_result_set_ref);
#endif
extern cql_int32 redundant_cast_get_plugh(redundant_cast_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 redundant_cast_get_five(redundant_cast_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 redundant_cast_result_count(redundant_cast_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code redundant_cast_fetch_results(sqlite3 *_Nonnull _db_, redundant_cast_result_set_ref _Nullable *_Nonnull result_set);
#define redundant_cast_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define redundant_cast_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code view_creator(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code settings_info(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code use_with_select(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code rowset_object_reader(sqlite3 *_Nonnull _db_, cql_object_ref _Nullable rowset);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code upsert_do_something(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code with_upsert_form(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code upsert_do_nothing(sqlite3 *_Nonnull _db_, cql_int32 id_);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code use_many_out_cursors(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code fetch_many_times(sqlite3 *_Nonnull _db_, cql_bool arg);

// The statement ending at line XXXX
#define CRC_out_union_two -7047738911302453990L

extern cql_string_ref _Nonnull out_union_two_stored_procedure_name;

#define out_union_two_data_types_count 2

#ifndef result_set_type_decl_out_union_two_result_set
#define result_set_type_decl_out_union_two_result_set 1
cql_result_set_type_decl(out_union_two_result_set, out_union_two_result_set_ref);
#endif
extern cql_int32 out_union_two_get_x(out_union_two_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nonnull out_union_two_get_y(out_union_two_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 out_union_two_result_count(out_union_two_result_set_ref _Nonnull result_set);
#define out_union_two_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define out_union_two_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)
extern void out_union_two_fetch_results(out_union_two_result_set_ref _Nullable *_Nonnull _result_set_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code out_union_reader(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
#define CRC_out_union_from_select -3373972202385251196L

extern cql_string_ref _Nonnull out_union_from_select_stored_procedure_name;

#define out_union_from_select_data_types_count 2

#ifndef result_set_type_decl_out_union_from_select_result_set
#define result_set_type_decl_out_union_from_select_result_set 1
cql_result_set_type_decl(out_union_from_select_result_set, out_union_from_select_result_set_ref);
#endif
extern cql_int32 out_union_from_select_get_x(out_union_from_select_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nonnull out_union_from_select_get_y(out_union_from_select_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 out_union_from_select_result_count(out_union_from_select_result_set_ref _Nonnull result_set);
#define out_union_from_select_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define out_union_from_select_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)
extern CQL_WARN_UNUSED cql_code out_union_from_select_fetch_results(sqlite3 *_Nonnull _db_, out_union_from_select_result_set_ref _Nullable *_Nonnull _result_set_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code out_union_dml_reader(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
#define CRC_out_union_values -751764534695154440L

extern cql_string_ref _Nonnull out_union_values_stored_procedure_name;

#define out_union_values_data_types_count 2

#ifndef result_set_type_decl_out_union_values_result_set
#define result_set_type_decl_out_union_values_result_set 1
cql_result_set_type_decl(out_union_values_result_set, out_union_values_result_set_ref);
#endif
extern cql_int32 out_union_values_get_x(out_union_values_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 out_union_values_get_y(out_union_values_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 out_union_values_result_count(out_union_values_result_set_ref _Nonnull result_set);
#define out_union_values_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define out_union_values_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)
extern void out_union_values_fetch_results(out_union_values_result_set_ref _Nullable *_Nonnull _result_set_, cql_int32 a, cql_int32 b);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code read_out_union_values(sqlite3 *_Nonnull _db_, cql_int32 a, cql_int32 b);

// The statement ending at line XXXX
#define CRC_out_union_dml -1250369399704506439L

extern cql_string_ref _Nonnull out_union_dml_stored_procedure_name;

#define out_union_dml_data_types_count 2

#ifndef result_set_type_decl_out_union_dml_result_set
#define result_set_type_decl_out_union_dml_result_set 1
cql_result_set_type_decl(out_union_dml_result_set, out_union_dml_result_set_ref);
#endif
extern cql_int32 out_union_dml_get_id(out_union_dml_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nullable out_union_dml_get_data(out_union_dml_result_set_ref _Nonnull result_set, cql_int32 row);

#define out_union_dml_get_data_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 1)
extern cql_int32 out_union_dml_result_count(out_union_dml_result_set_ref _Nonnull result_set);
#define out_union_dml_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define out_union_dml_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

extern void out_union_dml_set_encoding(cql_int32 col, cql_bool encode);
extern CQL_WARN_UNUSED cql_code out_union_dml_fetch_results(sqlite3 *_Nonnull _db_, out_union_dml_result_set_ref _Nullable *_Nonnull _result_set_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code out_union_dml_for_call(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code compound_select_expr(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
#define CRC_window_function_invocation 5118069911674996300L

extern cql_string_ref _Nonnull window_function_invocation_stored_procedure_name;

#define window_function_invocation_data_types_count 2

#ifndef result_set_type_decl_window_function_invocation_result_set
#define result_set_type_decl_window_function_invocation_result_set 1
cql_result_set_type_decl(window_function_invocation_result_set, window_function_invocation_result_set_ref);
#endif
extern cql_int32 window_function_invocation_get_id(window_function_invocation_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window_function_invocation_get_row_num(window_function_invocation_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window_function_invocation_result_count(window_function_invocation_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window_function_invocation_fetch_results(sqlite3 *_Nonnull _db_, window_function_invocation_result_set_ref _Nullable *_Nonnull result_set);
#define window_function_invocation_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window_function_invocation_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code update_cursor(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
#define CRC_use_return 6020670114685873144L

extern cql_string_ref _Nonnull use_return_stored_procedure_name;

#define use_return_data_types_count 1

#ifndef result_set_type_decl_use_return_result_set
#define result_set_type_decl_use_return_result_set 1
cql_result_set_type_decl(use_return_result_set, use_return_result_set_ref);
#endif
extern cql_int32 use_return_get_x(use_return_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 use_return_result_count(use_return_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code use_return_fetch_results(sqlite3 *_Nonnull _db_, use_return_result_set_ref _Nullable *_Nonnull result_set);
#define use_return_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define use_return_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
extern void use_return_no_error_flow(void);

// The statement ending at line XXXX
extern void empty_proc(void);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code empty_blocks(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code tail_catch(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code pretty_print_with_quote(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code hex_quote(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
#define CRC_lotsa_columns_no_getters -713697970532333955L

extern cql_string_ref _Nonnull lotsa_columns_no_getters_stored_procedure_name;

#define lotsa_columns_no_getters_data_types_count 5

#ifndef result_set_type_decl_lotsa_columns_no_getters_result_set
#define result_set_type_decl_lotsa_columns_no_getters_result_set 1
cql_result_set_type_decl(lotsa_columns_no_getters_result_set, lotsa_columns_no_getters_result_set_ref);
#endif
extern cql_int32 lotsa_columns_no_getters_result_count(lotsa_columns_no_getters_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code lotsa_columns_no_getters_fetch_results(sqlite3 *_Nonnull _db_, lotsa_columns_no_getters_result_set_ref _Nullable *_Nonnull result_set);
#define lotsa_columns_no_getters_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define lotsa_columns_no_getters_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_sproc_with_copy 4273120440728091142L

extern cql_string_ref _Nonnull sproc_with_copy_stored_procedure_name;

#define sproc_with_copy_data_types_count 5

#ifndef result_set_type_decl_sproc_with_copy_result_set
#define result_set_type_decl_sproc_with_copy_result_set 1
cql_result_set_type_decl(sproc_with_copy_result_set, sproc_with_copy_result_set_ref);
#endif
extern cql_int32 sproc_with_copy_get_id(sproc_with_copy_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nullable sproc_with_copy_get_name(sproc_with_copy_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool sproc_with_copy_get_rate_is_null(sproc_with_copy_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int64 sproc_with_copy_get_rate_value(sproc_with_copy_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool sproc_with_copy_get_type_is_null(sproc_with_copy_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 sproc_with_copy_get_type_value(sproc_with_copy_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool sproc_with_copy_get_size_is_null(sproc_with_copy_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double sproc_with_copy_get_size_value(sproc_with_copy_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 sproc_with_copy_result_count(sproc_with_copy_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code sproc_with_copy_fetch_results(sqlite3 *_Nonnull _db_, sproc_with_copy_result_set_ref _Nullable *_Nonnull result_set);
#define sproc_with_copy_copy(result_set, result_set_to, from, count) \
cql_result_set_get_meta((cql_result_set_ref)(result_set))->copy( \
  (cql_result_set_ref)(result_set), \
  (cql_result_set_ref *)(result_set_to), \
  from, \
  count)
#define sproc_with_copy_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define sproc_with_copy_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_emit_object_with_setters -4441973732237463644L

extern cql_string_ref _Nonnull emit_object_with_setters_stored_procedure_name;

#define emit_object_with_setters_data_types_count 8

#ifndef result_set_type_decl_emit_object_with_setters_result_set
#define result_set_type_decl_emit_object_with_setters_result_set 1
cql_result_set_type_decl(emit_object_with_setters_result_set, emit_object_with_setters_result_set_ref);
#endif
extern cql_object_ref _Nonnull emit_object_with_setters_get_o(emit_object_with_setters_result_set_ref _Nonnull result_set);
extern void emit_object_with_setters_set_o(emit_object_with_setters_result_set_ref _Nonnull result_set, cql_object_ref _Nonnull new_value);
extern cql_object_ref _Nonnull emit_object_with_setters_get_x(emit_object_with_setters_result_set_ref _Nonnull result_set);
extern void emit_object_with_setters_set_x(emit_object_with_setters_result_set_ref _Nonnull result_set, cql_object_ref _Nonnull new_value);
extern cql_int32 emit_object_with_setters_get_i(emit_object_with_setters_result_set_ref _Nonnull result_set);
extern void emit_object_with_setters_set_i(emit_object_with_setters_result_set_ref _Nonnull result_set, cql_int32 new_value);
extern cql_int64 emit_object_with_setters_get_l(emit_object_with_setters_result_set_ref _Nonnull result_set);
extern void emit_object_with_setters_set_l(emit_object_with_setters_result_set_ref _Nonnull result_set, cql_int64 new_value);
extern cql_bool emit_object_with_setters_get_b(emit_object_with_setters_result_set_ref _Nonnull result_set);
extern void emit_object_with_setters_set_b(emit_object_with_setters_result_set_ref _Nonnull result_set, cql_bool new_value);
extern cql_double emit_object_with_setters_get_d(emit_object_with_setters_result_set_ref _Nonnull result_set);
extern void emit_object_with_setters_set_d(emit_object_with_setters_result_set_ref _Nonnull result_set, cql_double new_value);
extern cql_string_ref _Nonnull emit_object_with_setters_get_t(emit_object_with_setters_result_set_ref _Nonnull result_set);
extern void emit_object_with_setters_set_t(emit_object_with_setters_result_set_ref _Nonnull result_set, cql_string_ref _Nonnull new_value);
extern cql_blob_ref _Nonnull emit_object_with_setters_get_bl(emit_object_with_setters_result_set_ref _Nonnull result_set);
extern void emit_object_with_setters_set_bl(emit_object_with_setters_result_set_ref _Nonnull result_set, cql_blob_ref _Nonnull new_value);
extern cql_int32 emit_object_with_setters_result_count(emit_object_with_setters_result_set_ref _Nonnull result_set);
extern void emit_object_with_setters_fetch_results( emit_object_with_setters_result_set_ref _Nullable *_Nonnull result_set, cql_object_ref _Nonnull o, cql_object_ref _Nonnull x, cql_int32 i, cql_int64 l, cql_bool b, cql_double d, cql_string_ref _Nonnull t, cql_blob_ref _Nonnull bl);
#define emit_object_with_setters_hash(result_set) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), 0)
#define emit_object_with_setters_equal(rs1, rs2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  0, \
  (cql_result_set_ref)(rs2), \
  0)

// The statement ending at line XXXX
#define CRC_emit_setters_with_nullables -2553042968957586047L

extern cql_string_ref _Nonnull emit_setters_with_nullables_stored_procedure_name;

#define emit_setters_with_nullables_data_types_count 8

#ifndef result_set_type_decl_emit_setters_with_nullables_result_set
#define result_set_type_decl_emit_setters_with_nullables_result_set 1
cql_result_set_type_decl(emit_setters_with_nullables_result_set, emit_setters_with_nullables_result_set_ref);
#endif
extern cql_object_ref _Nullable emit_setters_with_nullables_get_o(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern void emit_setters_with_nullables_set_o(emit_setters_with_nullables_result_set_ref _Nonnull result_set, cql_object_ref _Nullable new_value);
extern cql_object_ref _Nullable emit_setters_with_nullables_get_x(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern void emit_setters_with_nullables_set_x(emit_setters_with_nullables_result_set_ref _Nonnull result_set, cql_object_ref _Nullable new_value);
extern cql_bool emit_setters_with_nullables_get_i_is_null(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern cql_int32 emit_setters_with_nullables_get_i_value(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern void emit_setters_with_nullables_set_i_value(emit_setters_with_nullables_result_set_ref _Nonnull result_set, cql_int32 new_value);
extern void emit_setters_with_nullables_set_i_to_null(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern cql_bool emit_setters_with_nullables_get_l_is_null(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern cql_int64 emit_setters_with_nullables_get_l_value(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern void emit_setters_with_nullables_set_l_value(emit_setters_with_nullables_result_set_ref _Nonnull result_set, cql_int64 new_value);
extern void emit_setters_with_nullables_set_l_to_null(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern cql_bool emit_setters_with_nullables_get_b_is_null(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern cql_bool emit_setters_with_nullables_get_b_value(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern void emit_setters_with_nullables_set_b_value(emit_setters_with_nullables_result_set_ref _Nonnull result_set, cql_bool new_value);
extern void emit_setters_with_nullables_set_b_to_null(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern cql_bool emit_setters_with_nullables_get_d_is_null(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern cql_double emit_setters_with_nullables_get_d_value(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern void emit_setters_with_nullables_set_d_value(emit_setters_with_nullables_result_set_ref _Nonnull result_set, cql_double new_value);
extern void emit_setters_with_nullables_set_d_to_null(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern cql_string_ref _Nullable emit_setters_with_nullables_get_t(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern void emit_setters_with_nullables_set_t(emit_setters_with_nullables_result_set_ref _Nonnull result_set, cql_string_ref _Nullable new_value);
extern cql_blob_ref _Nullable emit_setters_with_nullables_get_bl(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern void emit_setters_with_nullables_set_bl(emit_setters_with_nullables_result_set_ref _Nonnull result_set, cql_blob_ref _Nullable new_value);
extern cql_int32 emit_setters_with_nullables_result_count(emit_setters_with_nullables_result_set_ref _Nonnull result_set);
extern void emit_setters_with_nullables_fetch_results( emit_setters_with_nullables_result_set_ref _Nullable *_Nonnull result_set, cql_object_ref _Nullable o, cql_object_ref _Nullable x, cql_nullable_int32 i, cql_nullable_int64 l, cql_nullable_bool b, cql_nullable_double d, cql_string_ref _Nullable t, cql_blob_ref _Nullable bl);
#define emit_setters_with_nullables_hash(result_set) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), 0)
#define emit_setters_with_nullables_equal(rs1, rs2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  0, \
  (cql_result_set_ref)(rs2), \
  0)

// The statement ending at line XXXX
#define CRC_no_out_with_setters 4417184966231195868L

extern cql_string_ref _Nonnull no_out_with_setters_stored_procedure_name;

#define no_out_with_setters_data_types_count 5

#ifndef result_set_type_decl_no_out_with_setters_result_set
#define result_set_type_decl_no_out_with_setters_result_set 1
cql_result_set_type_decl(no_out_with_setters_result_set, no_out_with_setters_result_set_ref);
#endif
extern cql_int32 no_out_with_setters_get_id(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row);
extern void no_out_with_setters_set_id(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row, cql_int32 new_value);
extern cql_string_ref _Nullable no_out_with_setters_get_name(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row);
extern void no_out_with_setters_set_name(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row, cql_string_ref _Nullable new_value);
extern cql_bool no_out_with_setters_get_rate_is_null(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int64 no_out_with_setters_get_rate_value(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row);
extern void no_out_with_setters_set_rate_value(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row, cql_int64 new_value);
extern void no_out_with_setters_set_rate_to_null(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool no_out_with_setters_get_type_is_null(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 no_out_with_setters_get_type_value(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row);
extern void no_out_with_setters_set_type_value(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row, cql_int32 new_value);
extern void no_out_with_setters_set_type_to_null(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool no_out_with_setters_get_size_is_null(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double no_out_with_setters_get_size_value(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row);
extern void no_out_with_setters_set_size_value(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row, cql_double new_value);
extern void no_out_with_setters_set_size_to_null(no_out_with_setters_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 no_out_with_setters_result_count(no_out_with_setters_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code no_out_with_setters_fetch_results(sqlite3 *_Nonnull _db_, no_out_with_setters_result_set_ref _Nullable *_Nonnull result_set);
#define no_out_with_setters_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define no_out_with_setters_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code early_out_rc_cleared(sqlite3 *_Nonnull _db_, cql_nullable_int32 *_Nonnull x);

// The statement ending at line XXXX
#define CRC_vault_sensitive_with_values_proc -1494789765547780687L

extern cql_string_ref _Nonnull vault_sensitive_with_values_proc_stored_procedure_name;

#define vault_sensitive_with_values_proc_data_types_count 4

#ifndef result_set_type_decl_vault_sensitive_with_values_proc_result_set
#define result_set_type_decl_vault_sensitive_with_values_proc_result_set 1
cql_result_set_type_decl(vault_sensitive_with_values_proc_result_set, vault_sensitive_with_values_proc_result_set_ref);
#endif
extern cql_int32 vault_sensitive_with_values_proc_get_id(vault_sensitive_with_values_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nullable vault_sensitive_with_values_proc_get_name(vault_sensitive_with_values_proc_result_set_ref _Nonnull result_set, cql_int32 row);

#define vault_sensitive_with_values_proc_get_name_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 1)
extern cql_string_ref _Nullable vault_sensitive_with_values_proc_get_title(vault_sensitive_with_values_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool vault_sensitive_with_values_proc_get_type_is_null(vault_sensitive_with_values_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int64 vault_sensitive_with_values_proc_get_type_value(vault_sensitive_with_values_proc_result_set_ref _Nonnull result_set, cql_int32 row);

#define vault_sensitive_with_values_proc_get_type_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 3)
extern cql_int32 vault_sensitive_with_values_proc_result_count(vault_sensitive_with_values_proc_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code vault_sensitive_with_values_proc_fetch_results(sqlite3 *_Nonnull _db_, vault_sensitive_with_values_proc_result_set_ref _Nullable *_Nonnull result_set);
#define vault_sensitive_with_values_proc_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define vault_sensitive_with_values_proc_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

extern void vault_sensitive_with_values_proc_set_encoding(cql_int32 col, cql_bool encode);

// The statement ending at line XXXX
#define CRC_vault_not_nullable_sensitive_with_values_proc 2847045691334571163L

extern cql_string_ref _Nonnull vault_not_nullable_sensitive_with_values_proc_stored_procedure_name;

#define vault_not_nullable_sensitive_with_values_proc_data_types_count 4

#ifndef result_set_type_decl_vault_not_nullable_sensitive_with_values_proc_result_set
#define result_set_type_decl_vault_not_nullable_sensitive_with_values_proc_result_set 1
cql_result_set_type_decl(vault_not_nullable_sensitive_with_values_proc_result_set, vault_not_nullable_sensitive_with_values_proc_result_set_ref);
#endif
extern cql_int32 vault_not_nullable_sensitive_with_values_proc_get_id(vault_not_nullable_sensitive_with_values_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nonnull vault_not_nullable_sensitive_with_values_proc_get_name(vault_not_nullable_sensitive_with_values_proc_result_set_ref _Nonnull result_set, cql_int32 row);

#define vault_not_nullable_sensitive_with_values_proc_get_name_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 1)
extern cql_string_ref _Nonnull vault_not_nullable_sensitive_with_values_proc_get_title(vault_not_nullable_sensitive_with_values_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int64 vault_not_nullable_sensitive_with_values_proc_get_type(vault_not_nullable_sensitive_with_values_proc_result_set_ref _Nonnull result_set, cql_int32 row);

#define vault_not_nullable_sensitive_with_values_proc_get_type_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 3)
extern cql_int32 vault_not_nullable_sensitive_with_values_proc_result_count(vault_not_nullable_sensitive_with_values_proc_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code vault_not_nullable_sensitive_with_values_proc_fetch_results(sqlite3 *_Nonnull _db_, vault_not_nullable_sensitive_with_values_proc_result_set_ref _Nullable *_Nonnull result_set);
#define vault_not_nullable_sensitive_with_values_proc_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define vault_not_nullable_sensitive_with_values_proc_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

extern void vault_not_nullable_sensitive_with_values_proc_set_encoding(cql_int32 col, cql_bool encode);

// The statement ending at line XXXX
#define CRC_vault_sensitive_with_no_values_proc -2359302084369840114L

extern cql_string_ref _Nonnull vault_sensitive_with_no_values_proc_stored_procedure_name;

#define vault_sensitive_with_no_values_proc_data_types_count 4

#ifndef result_set_type_decl_vault_sensitive_with_no_values_proc_result_set
#define result_set_type_decl_vault_sensitive_with_no_values_proc_result_set 1
cql_result_set_type_decl(vault_sensitive_with_no_values_proc_result_set, vault_sensitive_with_no_values_proc_result_set_ref);
#endif
extern cql_int32 vault_sensitive_with_no_values_proc_get_id(vault_sensitive_with_no_values_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nullable vault_sensitive_with_no_values_proc_get_name(vault_sensitive_with_no_values_proc_result_set_ref _Nonnull result_set, cql_int32 row);

#define vault_sensitive_with_no_values_proc_get_name_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 1)
extern cql_string_ref _Nullable vault_sensitive_with_no_values_proc_get_title(vault_sensitive_with_no_values_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool vault_sensitive_with_no_values_proc_get_type_is_null(vault_sensitive_with_no_values_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int64 vault_sensitive_with_no_values_proc_get_type_value(vault_sensitive_with_no_values_proc_result_set_ref _Nonnull result_set, cql_int32 row);

#define vault_sensitive_with_no_values_proc_get_type_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 3)
extern cql_int32 vault_sensitive_with_no_values_proc_result_count(vault_sensitive_with_no_values_proc_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code vault_sensitive_with_no_values_proc_fetch_results(sqlite3 *_Nonnull _db_, vault_sensitive_with_no_values_proc_result_set_ref _Nullable *_Nonnull result_set);
#define vault_sensitive_with_no_values_proc_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define vault_sensitive_with_no_values_proc_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

extern void vault_sensitive_with_no_values_proc_set_encoding(cql_int32 col, cql_bool encode);

// The statement ending at line XXXX
#define CRC_vault_union_all_table_proc 1792652619972807135L

extern cql_string_ref _Nonnull vault_union_all_table_proc_stored_procedure_name;

#define vault_union_all_table_proc_data_types_count 4

#ifndef result_set_type_decl_vault_union_all_table_proc_result_set
#define result_set_type_decl_vault_union_all_table_proc_result_set 1
cql_result_set_type_decl(vault_union_all_table_proc_result_set, vault_union_all_table_proc_result_set_ref);
#endif
extern cql_int32 vault_union_all_table_proc_get_id(vault_union_all_table_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nullable vault_union_all_table_proc_get_name(vault_union_all_table_proc_result_set_ref _Nonnull result_set, cql_int32 row);

#define vault_union_all_table_proc_get_name_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 1)
extern cql_string_ref _Nullable vault_union_all_table_proc_get_title(vault_union_all_table_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool vault_union_all_table_proc_get_type_is_null(vault_union_all_table_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int64 vault_union_all_table_proc_get_type_value(vault_union_all_table_proc_result_set_ref _Nonnull result_set, cql_int32 row);

#define vault_union_all_table_proc_get_type_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 3)
extern cql_int32 vault_union_all_table_proc_result_count(vault_union_all_table_proc_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code vault_union_all_table_proc_fetch_results(sqlite3 *_Nonnull _db_, vault_union_all_table_proc_result_set_ref _Nullable *_Nonnull result_set);
#define vault_union_all_table_proc_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define vault_union_all_table_proc_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

extern void vault_union_all_table_proc_set_encoding(cql_int32 col, cql_bool encode);

// The statement ending at line XXXX
#define CRC_vault_alias_column_proc -8580291323805756L

extern cql_string_ref _Nonnull vault_alias_column_proc_stored_procedure_name;

#define vault_alias_column_proc_data_types_count 1

#ifndef result_set_type_decl_vault_alias_column_proc_result_set
#define result_set_type_decl_vault_alias_column_proc_result_set 1
cql_result_set_type_decl(vault_alias_column_proc_result_set, vault_alias_column_proc_result_set_ref);
#endif
extern cql_string_ref _Nullable vault_alias_column_proc_get_alias_name(vault_alias_column_proc_result_set_ref _Nonnull result_set, cql_int32 row);

#define vault_alias_column_proc_get_alias_name_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 0)
extern cql_int32 vault_alias_column_proc_result_count(vault_alias_column_proc_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code vault_alias_column_proc_fetch_results(sqlite3 *_Nonnull _db_, vault_alias_column_proc_result_set_ref _Nullable *_Nonnull result_set);
#define vault_alias_column_proc_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define vault_alias_column_proc_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

extern void vault_alias_column_proc_set_encoding(cql_int32 col, cql_bool encode);

// The statement ending at line XXXX
#define CRC_vault_alias_column_name_proc 798196861874471198L

extern cql_string_ref _Nonnull vault_alias_column_name_proc_stored_procedure_name;

#define vault_alias_column_name_proc_data_types_count 1

#ifndef result_set_type_decl_vault_alias_column_name_proc_result_set
#define result_set_type_decl_vault_alias_column_name_proc_result_set 1
cql_result_set_type_decl(vault_alias_column_name_proc_result_set, vault_alias_column_name_proc_result_set_ref);
#endif
extern cql_string_ref _Nullable vault_alias_column_name_proc_get_alias_name(vault_alias_column_name_proc_result_set_ref _Nonnull result_set, cql_int32 row);

#define vault_alias_column_name_proc_get_alias_name_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 0)
extern cql_int32 vault_alias_column_name_proc_result_count(vault_alias_column_name_proc_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code vault_alias_column_name_proc_fetch_results(sqlite3 *_Nonnull _db_, vault_alias_column_name_proc_result_set_ref _Nullable *_Nonnull result_set);
#define vault_alias_column_name_proc_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define vault_alias_column_name_proc_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

extern void vault_alias_column_name_proc_set_encoding(cql_int32 col, cql_bool encode);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code vault_cursor_proc(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
#define CRC_vault_sensitive_with_context_and_sensitive_columns_proc -3624977926726665152L

extern cql_string_ref _Nonnull vault_sensitive_with_context_and_sensitive_columns_proc_stored_procedure_name;

#define vault_sensitive_with_context_and_sensitive_columns_proc_data_types_count 4

#ifndef result_set_type_decl_vault_sensitive_with_context_and_sensitive_columns_proc_result_set
#define result_set_type_decl_vault_sensitive_with_context_and_sensitive_columns_proc_result_set 1
cql_result_set_type_decl(vault_sensitive_with_context_and_sensitive_columns_proc_result_set, vault_sensitive_with_context_and_sensitive_columns_proc_result_set_ref);
#endif
extern cql_int32 vault_sensitive_with_context_and_sensitive_columns_proc_get_id(vault_sensitive_with_context_and_sensitive_columns_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nullable vault_sensitive_with_context_and_sensitive_columns_proc_get_name(vault_sensitive_with_context_and_sensitive_columns_proc_result_set_ref _Nonnull result_set, cql_int32 row);

#define vault_sensitive_with_context_and_sensitive_columns_proc_get_name_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 1)
extern cql_string_ref _Nullable vault_sensitive_with_context_and_sensitive_columns_proc_get_title(vault_sensitive_with_context_and_sensitive_columns_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool vault_sensitive_with_context_and_sensitive_columns_proc_get_type_is_null(vault_sensitive_with_context_and_sensitive_columns_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int64 vault_sensitive_with_context_and_sensitive_columns_proc_get_type_value(vault_sensitive_with_context_and_sensitive_columns_proc_result_set_ref _Nonnull result_set, cql_int32 row);

#define vault_sensitive_with_context_and_sensitive_columns_proc_get_type_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 3)
extern cql_int32 vault_sensitive_with_context_and_sensitive_columns_proc_result_count(vault_sensitive_with_context_and_sensitive_columns_proc_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code vault_sensitive_with_context_and_sensitive_columns_proc_fetch_results(sqlite3 *_Nonnull _db_, vault_sensitive_with_context_and_sensitive_columns_proc_result_set_ref _Nullable *_Nonnull result_set);
#define vault_sensitive_with_context_and_sensitive_columns_proc_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define vault_sensitive_with_context_and_sensitive_columns_proc_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

extern void vault_sensitive_with_context_and_sensitive_columns_proc_set_encoding(cql_int32 col, cql_bool encode);

// The statement ending at line XXXX
#define CRC_vault_sensitive_with_no_context_and_sensitive_columns_proc -7467575730168659275L

extern cql_string_ref _Nonnull vault_sensitive_with_no_context_and_sensitive_columns_proc_stored_procedure_name;

#define vault_sensitive_with_no_context_and_sensitive_columns_proc_data_types_count 4

#ifndef result_set_type_decl_vault_sensitive_with_no_context_and_sensitive_columns_proc_result_set
#define result_set_type_decl_vault_sensitive_with_no_context_and_sensitive_columns_proc_result_set 1
cql_result_set_type_decl(vault_sensitive_with_no_context_and_sensitive_columns_proc_result_set, vault_sensitive_with_no_context_and_sensitive_columns_proc_result_set_ref);
#endif
extern cql_int32 vault_sensitive_with_no_context_and_sensitive_columns_proc_get_id(vault_sensitive_with_no_context_and_sensitive_columns_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nullable vault_sensitive_with_no_context_and_sensitive_columns_proc_get_name(vault_sensitive_with_no_context_and_sensitive_columns_proc_result_set_ref _Nonnull result_set, cql_int32 row);

#define vault_sensitive_with_no_context_and_sensitive_columns_proc_get_name_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 1)
extern cql_string_ref _Nullable vault_sensitive_with_no_context_and_sensitive_columns_proc_get_title(vault_sensitive_with_no_context_and_sensitive_columns_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool vault_sensitive_with_no_context_and_sensitive_columns_proc_get_type_is_null(vault_sensitive_with_no_context_and_sensitive_columns_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int64 vault_sensitive_with_no_context_and_sensitive_columns_proc_get_type_value(vault_sensitive_with_no_context_and_sensitive_columns_proc_result_set_ref _Nonnull result_set, cql_int32 row);

#define vault_sensitive_with_no_context_and_sensitive_columns_proc_get_type_is_encoded(rs) \
  cql_result_set_get_is_encoded_col((cql_result_set_ref)rs, 3)
extern cql_int32 vault_sensitive_with_no_context_and_sensitive_columns_proc_result_count(vault_sensitive_with_no_context_and_sensitive_columns_proc_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code vault_sensitive_with_no_context_and_sensitive_columns_proc_fetch_results(sqlite3 *_Nonnull _db_, vault_sensitive_with_no_context_and_sensitive_columns_proc_result_set_ref _Nullable *_Nonnull result_set);
#define vault_sensitive_with_no_context_and_sensitive_columns_proc_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define vault_sensitive_with_no_context_and_sensitive_columns_proc_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

extern void vault_sensitive_with_no_context_and_sensitive_columns_proc_set_encoding(cql_int32 col, cql_bool encode);

// The statement ending at line XXXX
#define CRC_vault_sensitive_with_context_and_no_sensitive_columns_proc -7109769656603081234L

extern cql_string_ref _Nonnull vault_sensitive_with_context_and_no_sensitive_columns_proc_stored_procedure_name;

#define vault_sensitive_with_context_and_no_sensitive_columns_proc_data_types_count 4

#ifndef result_set_type_decl_vault_sensitive_with_context_and_no_sensitive_columns_proc_result_set
#define result_set_type_decl_vault_sensitive_with_context_and_no_sensitive_columns_proc_result_set 1
cql_result_set_type_decl(vault_sensitive_with_context_and_no_sensitive_columns_proc_result_set, vault_sensitive_with_context_and_no_sensitive_columns_proc_result_set_ref);
#endif
extern cql_int32 vault_sensitive_with_context_and_no_sensitive_columns_proc_get_id(vault_sensitive_with_context_and_no_sensitive_columns_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nullable vault_sensitive_with_context_and_no_sensitive_columns_proc_get_name(vault_sensitive_with_context_and_no_sensitive_columns_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nullable vault_sensitive_with_context_and_no_sensitive_columns_proc_get_title(vault_sensitive_with_context_and_no_sensitive_columns_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool vault_sensitive_with_context_and_no_sensitive_columns_proc_get_type_is_null(vault_sensitive_with_context_and_no_sensitive_columns_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int64 vault_sensitive_with_context_and_no_sensitive_columns_proc_get_type_value(vault_sensitive_with_context_and_no_sensitive_columns_proc_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 vault_sensitive_with_context_and_no_sensitive_columns_proc_result_count(vault_sensitive_with_context_and_no_sensitive_columns_proc_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code vault_sensitive_with_context_and_no_sensitive_columns_proc_fetch_results(sqlite3 *_Nonnull _db_, vault_sensitive_with_context_and_no_sensitive_columns_proc_result_set_ref _Nullable *_Nonnull result_set);
#define vault_sensitive_with_context_and_no_sensitive_columns_proc_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define vault_sensitive_with_context_and_no_sensitive_columns_proc_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

extern void vault_sensitive_with_context_and_no_sensitive_columns_proc_set_encoding(cql_int32 col, cql_bool encode);

// The statement ending at line XXXX

#ifndef result_set_type_decl_frag_test_result_set
#define result_set_type_decl_frag_test_result_set 1
cql_result_set_type_decl(frag_test_result_set, frag_test_result_set_ref);
#endif
extern cql_int32 frag_test_get_id(frag_test_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 frag_test_result_count(frag_test_result_set_ref _Nonnull result_set);
#define frag_test_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define frag_test_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)
extern CQL_WARN_UNUSED cql_code frag_test_fetch_results(sqlite3 *_Nonnull _db_, frag_test_result_set_ref _Nullable *_Nonnull result_set);

// The statement ending at line XXXX

extern cql_int32 ext_get_id(frag_test_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 frag_test_get_id(frag_test_result_set_ref _Nonnull result_set, cql_int32 row);

extern cql_bool ext_get_f2_is_null(frag_test_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool __PRIVATE__frag_test_get_f2_is_null(frag_test_result_set_ref _Nonnull result_set, cql_int32 row);

extern cql_int32 ext_get_f2_value(frag_test_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 __PRIVATE__frag_test_get_f2_value(frag_test_result_set_ref _Nonnull result_set, cql_int32 row);

extern cql_int32 ext_result_count(frag_test_result_set_ref _Nonnull result_set);

// The statement ending at line XXXX

extern cql_int32 ext2_get_id(frag_test_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 frag_test_get_id(frag_test_result_set_ref _Nonnull result_set, cql_int32 row);

extern cql_bool ext2_get_f3_is_null(frag_test_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool __PRIVATE__frag_test_get_f3_is_null(frag_test_result_set_ref _Nonnull result_set, cql_int32 row);

extern cql_int32 ext2_get_f3_value(frag_test_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 __PRIVATE__frag_test_get_f3_value(frag_test_result_set_ref _Nonnull result_set, cql_int32 row);

extern cql_int32 ext2_result_count(frag_test_result_set_ref _Nonnull result_set);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code try_boxing(sqlite3 *_Nonnull _db_, cql_object_ref _Nullable *_Nonnull result);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code try_unboxing(sqlite3 *_Nonnull _db_, cql_object_ref _Nullable boxed_cursor);

// The statement ending at line XXXX
extern void local_cast_int_notnull(void);

// The statement ending at line XXXX
extern void local_cast_int(void);

// The statement ending at line XXXX
extern void local_cast_long_notnull(void);

// The statement ending at line XXXX
extern void local_cast_long(void);

// The statement ending at line XXXX
extern void local_cast_real_notnull(void);

// The statement ending at line XXXX
extern void local_cast_real(void);

// The statement ending at line XXXX
extern void local_cast_bool_notnull(void);

// The statement ending at line XXXX
extern void local_cast_bool(void);

// The statement ending at line XXXX
extern void local_cast_from_bool_notnull(void);

// The statement ending at line XXXX
extern void local_cast_from_bool(void);

// The statement ending at line XXXX

// The statement ending at line XXXX
extern void local_cast_from_bool_no_op_notnull(void);

// The statement ending at line XXXX
extern void local_cast_from_bool_no_op(void);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code base_proc_savepoint(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code base_proc_savepoint_commit_return(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code base_proc_savepoint_rollback_return(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern cql_int32 x;

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
#define CRC_window1 -9110545578536106646L

extern cql_string_ref _Nonnull window1_stored_procedure_name;

#define window1_data_types_count 3

#ifndef result_set_type_decl_window1_result_set
#define result_set_type_decl_window1_result_set 1
cql_result_set_type_decl(window1_result_set, window1_result_set_ref);
#endif
extern cql_bool window1_get_month_is_null(window1_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window1_get_month_value(window1_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window1_get_amount_is_null(window1_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window1_get_amount_value(window1_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window1_get_SalesMovingAverage_is_null(window1_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window1_get_SalesMovingAverage_value(window1_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window1_result_count(window1_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window1_fetch_results(sqlite3 *_Nonnull _db_, window1_result_set_ref _Nullable *_Nonnull result_set);
#define window1_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window1_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_window2 8983376849470527101L

extern cql_string_ref _Nonnull window2_stored_procedure_name;

#define window2_data_types_count 3

#ifndef result_set_type_decl_window2_result_set
#define result_set_type_decl_window2_result_set 1
cql_result_set_type_decl(window2_result_set, window2_result_set_ref);
#endif
extern cql_bool window2_get_month_is_null(window2_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window2_get_month_value(window2_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window2_get_amount_is_null(window2_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window2_get_amount_value(window2_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window2_get_RunningTotal_is_null(window2_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window2_get_RunningTotal_value(window2_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window2_result_count(window2_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window2_fetch_results(sqlite3 *_Nonnull _db_, window2_result_set_ref _Nullable *_Nonnull result_set);
#define window2_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window2_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_window3 2900920917095376752L

extern cql_string_ref _Nonnull window3_stored_procedure_name;

#define window3_data_types_count 3

#ifndef result_set_type_decl_window3_result_set
#define result_set_type_decl_window3_result_set 1
cql_result_set_type_decl(window3_result_set, window3_result_set_ref);
#endif
extern cql_bool window3_get_month_is_null(window3_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window3_get_month_value(window3_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window3_get_amount_is_null(window3_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window3_get_amount_value(window3_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window3_get_SalesMovingAverage_is_null(window3_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window3_get_SalesMovingAverage_value(window3_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window3_result_count(window3_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window3_fetch_results(sqlite3 *_Nonnull _db_, window3_result_set_ref _Nullable *_Nonnull result_set);
#define window3_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window3_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_window4 1442532731698589398L

extern cql_string_ref _Nonnull window4_stored_procedure_name;

#define window4_data_types_count 3

#ifndef result_set_type_decl_window4_result_set
#define result_set_type_decl_window4_result_set 1
cql_result_set_type_decl(window4_result_set, window4_result_set_ref);
#endif
extern cql_bool window4_get_month_is_null(window4_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window4_get_month_value(window4_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window4_get_amount_is_null(window4_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window4_get_amount_value(window4_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window4_get_SalesMovingAverage_is_null(window4_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window4_get_SalesMovingAverage_value(window4_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window4_result_count(window4_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window4_fetch_results(sqlite3 *_Nonnull _db_, window4_result_set_ref _Nullable *_Nonnull result_set);
#define window4_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window4_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_window5 4678569801261801435L

extern cql_string_ref _Nonnull window5_stored_procedure_name;

#define window5_data_types_count 3

#ifndef result_set_type_decl_window5_result_set
#define result_set_type_decl_window5_result_set 1
cql_result_set_type_decl(window5_result_set, window5_result_set_ref);
#endif
extern cql_bool window5_get_month_is_null(window5_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window5_get_month_value(window5_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window5_get_amount_is_null(window5_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window5_get_amount_value(window5_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window5_get_SalesMovingAverage_is_null(window5_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window5_get_SalesMovingAverage_value(window5_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window5_result_count(window5_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window5_fetch_results(sqlite3 *_Nonnull _db_, window5_result_set_ref _Nullable *_Nonnull result_set);
#define window5_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window5_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_window6 -4767600319982646068L

extern cql_string_ref _Nonnull window6_stored_procedure_name;

#define window6_data_types_count 3

#ifndef result_set_type_decl_window6_result_set
#define result_set_type_decl_window6_result_set 1
cql_result_set_type_decl(window6_result_set, window6_result_set_ref);
#endif
extern cql_bool window6_get_month_is_null(window6_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window6_get_month_value(window6_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window6_get_amount_is_null(window6_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window6_get_amount_value(window6_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window6_get_SalesMovingAverage_is_null(window6_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window6_get_SalesMovingAverage_value(window6_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window6_result_count(window6_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window6_fetch_results(sqlite3 *_Nonnull _db_, window6_result_set_ref _Nullable *_Nonnull result_set);
#define window6_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window6_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_window7 -1639471520844235327L

extern cql_string_ref _Nonnull window7_stored_procedure_name;

#define window7_data_types_count 3

#ifndef result_set_type_decl_window7_result_set
#define result_set_type_decl_window7_result_set 1
cql_result_set_type_decl(window7_result_set, window7_result_set_ref);
#endif
extern cql_bool window7_get_month_is_null(window7_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window7_get_month_value(window7_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window7_get_amount_is_null(window7_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window7_get_amount_value(window7_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window7_get_SalesMovingAverage_is_null(window7_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window7_get_SalesMovingAverage_value(window7_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window7_result_count(window7_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window7_fetch_results(sqlite3 *_Nonnull _db_, window7_result_set_ref _Nullable *_Nonnull result_set);
#define window7_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window7_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_window8 -4225621730571526272L

extern cql_string_ref _Nonnull window8_stored_procedure_name;

#define window8_data_types_count 3

#ifndef result_set_type_decl_window8_result_set
#define result_set_type_decl_window8_result_set 1
cql_result_set_type_decl(window8_result_set, window8_result_set_ref);
#endif
extern cql_bool window8_get_month_is_null(window8_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window8_get_month_value(window8_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window8_get_amount_is_null(window8_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window8_get_amount_value(window8_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window8_get_SalesMovingAverage_is_null(window8_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window8_get_SalesMovingAverage_value(window8_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window8_result_count(window8_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window8_fetch_results(sqlite3 *_Nonnull _db_, window8_result_set_ref _Nullable *_Nonnull result_set);
#define window8_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window8_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_window9 -7948032011438117235L

extern cql_string_ref _Nonnull window9_stored_procedure_name;

#define window9_data_types_count 3

#ifndef result_set_type_decl_window9_result_set
#define result_set_type_decl_window9_result_set 1
cql_result_set_type_decl(window9_result_set, window9_result_set_ref);
#endif
extern cql_bool window9_get_month_is_null(window9_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window9_get_month_value(window9_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window9_get_amount_is_null(window9_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window9_get_amount_value(window9_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window9_get_SalesMovingAverage_is_null(window9_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window9_get_SalesMovingAverage_value(window9_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window9_result_count(window9_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window9_fetch_results(sqlite3 *_Nonnull _db_, window9_result_set_ref _Nullable *_Nonnull result_set);
#define window9_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window9_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_window10 -2070418722936796800L

extern cql_string_ref _Nonnull window10_stored_procedure_name;

#define window10_data_types_count 3

#ifndef result_set_type_decl_window10_result_set
#define result_set_type_decl_window10_result_set 1
cql_result_set_type_decl(window10_result_set, window10_result_set_ref);
#endif
extern cql_bool window10_get_month_is_null(window10_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window10_get_month_value(window10_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window10_get_amount_is_null(window10_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window10_get_amount_value(window10_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window10_get_SalesMovingAverage_is_null(window10_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window10_get_SalesMovingAverage_value(window10_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window10_result_count(window10_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window10_fetch_results(sqlite3 *_Nonnull _db_, window10_result_set_ref _Nullable *_Nonnull result_set);
#define window10_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window10_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_window11 -5211477624582817651L

extern cql_string_ref _Nonnull window11_stored_procedure_name;

#define window11_data_types_count 3

#ifndef result_set_type_decl_window11_result_set
#define result_set_type_decl_window11_result_set 1
cql_result_set_type_decl(window11_result_set, window11_result_set_ref);
#endif
extern cql_bool window11_get_month_is_null(window11_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window11_get_month_value(window11_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window11_get_amount_is_null(window11_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window11_get_amount_value(window11_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window11_get_SalesMovingAverage_is_null(window11_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window11_get_SalesMovingAverage_value(window11_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window11_result_count(window11_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window11_fetch_results(sqlite3 *_Nonnull _db_, window11_result_set_ref _Nullable *_Nonnull result_set);
#define window11_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window11_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_window12 5374648134786427802L

extern cql_string_ref _Nonnull window12_stored_procedure_name;

#define window12_data_types_count 3

#ifndef result_set_type_decl_window12_result_set
#define result_set_type_decl_window12_result_set 1
cql_result_set_type_decl(window12_result_set, window12_result_set_ref);
#endif
extern cql_bool window12_get_month_is_null(window12_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window12_get_month_value(window12_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window12_get_amount_is_null(window12_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window12_get_amount_value(window12_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window12_get_SalesMovingAverage_is_null(window12_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window12_get_SalesMovingAverage_value(window12_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window12_result_count(window12_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window12_fetch_results(sqlite3 *_Nonnull _db_, window12_result_set_ref _Nullable *_Nonnull result_set);
#define window12_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window12_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_window13 2197738557793753751L

extern cql_string_ref _Nonnull window13_stored_procedure_name;

#define window13_data_types_count 3

#ifndef result_set_type_decl_window13_result_set
#define result_set_type_decl_window13_result_set 1
cql_result_set_type_decl(window13_result_set, window13_result_set_ref);
#endif
extern cql_bool window13_get_month_is_null(window13_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window13_get_month_value(window13_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window13_get_amount_is_null(window13_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window13_get_amount_value(window13_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window13_get_SalesMovingAverage_is_null(window13_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window13_get_SalesMovingAverage_value(window13_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window13_result_count(window13_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window13_fetch_results(sqlite3 *_Nonnull _db_, window13_result_set_ref _Nullable *_Nonnull result_set);
#define window13_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window13_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_window14 2466050953464582961L

extern cql_string_ref _Nonnull window14_stored_procedure_name;

#define window14_data_types_count 3

#ifndef result_set_type_decl_window14_result_set
#define result_set_type_decl_window14_result_set 1
cql_result_set_type_decl(window14_result_set, window14_result_set_ref);
#endif
extern cql_bool window14_get_month_is_null(window14_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window14_get_month_value(window14_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window14_get_amount_is_null(window14_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window14_get_amount_value(window14_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window14_get_SalesMovingAverage_is_null(window14_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window14_get_SalesMovingAverage_value(window14_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window14_result_count(window14_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window14_fetch_results(sqlite3 *_Nonnull _db_, window14_result_set_ref _Nullable *_Nonnull result_set);
#define window14_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window14_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_window15 8561437263263031868L

extern cql_string_ref _Nonnull window15_stored_procedure_name;

#define window15_data_types_count 3

#ifndef result_set_type_decl_window15_result_set
#define result_set_type_decl_window15_result_set 1
cql_result_set_type_decl(window15_result_set, window15_result_set_ref);
#endif
extern cql_bool window15_get_month_is_null(window15_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window15_get_month_value(window15_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window15_get_amount_is_null(window15_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window15_get_amount_value(window15_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window15_get_SalesMovingAverage_is_null(window15_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window15_get_SalesMovingAverage_value(window15_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window15_result_count(window15_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window15_fetch_results(sqlite3 *_Nonnull _db_, window15_result_set_ref _Nullable *_Nonnull result_set);
#define window15_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window15_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_window16 -8364346268781842133L

extern cql_string_ref _Nonnull window16_stored_procedure_name;

#define window16_data_types_count 3

#ifndef result_set_type_decl_window16_result_set
#define result_set_type_decl_window16_result_set 1
cql_result_set_type_decl(window16_result_set, window16_result_set_ref);
#endif
extern cql_bool window16_get_month_is_null(window16_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window16_get_month_value(window16_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window16_get_amount_is_null(window16_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window16_get_amount_value(window16_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool window16_get_SalesMovingAverage_is_null(window16_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double window16_get_SalesMovingAverage_value(window16_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 window16_result_count(window16_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code window16_fetch_results(sqlite3 *_Nonnull _db_, window16_result_set_ref _Nullable *_Nonnull result_set);
#define window16_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define window16_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code emit_rc(sqlite3 *_Nonnull _db_, cql_int32 *_Nonnull result_code);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code rc_test(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code rc_test_lazy1(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code rc_test_lazy2(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
#ifndef enum_some_ints_defined
#define enum_some_ints_defined

enum some_ints {
  some_ints__foo = 12,
  some_ints__bar = 3
};

#endif

// The statement ending at line XXXX
#ifndef enum_some_ints_defined
#define enum_some_ints_defined

enum some_ints {
  some_ints__foo = 12,
  some_ints__bar = 3
};

#endif
#ifndef enum_some_reals_defined
#define enum_some_reals_defined


// enum some_reals (floating point values)
#define some_reals__foo 1.200000e+01
#define some_reals__bar 3.000000e+00

#endif
#ifndef enum_some_longs_defined
#define enum_some_longs_defined

enum some_longs {
  some_longs__foo = _64(9223372036854775807),
  some_longs__bar = _64(3)
};

#endif

// The statement ending at line XXXX
#ifndef enum_some_longs_defined
#define enum_some_longs_defined

enum some_longs {
  some_longs__foo = _64(9223372036854775807),
  some_longs__bar = _64(3)
};

#endif

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code virtual_table_creator(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern void out_arg_cursor(cql_int32 x, cql_int32 *_Nonnull y);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code make_virt_table(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX

// The statement ending at line XXXX
#define CRC_virtual1 6359168283958570447L

extern cql_string_ref _Nonnull virtual1_stored_procedure_name;

#define virtual1_data_types_count 2

#ifndef result_set_type_decl_virtual1_result_set
#define result_set_type_decl_virtual1_result_set 1
cql_result_set_type_decl(virtual1_result_set, virtual1_result_set_ref);
#endif
extern cql_int32 virtual1_get_vx(virtual1_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool virtual1_get_vy_is_null(virtual1_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 virtual1_get_vy_value(virtual1_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 virtual1_result_count(virtual1_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code virtual1_fetch_results(sqlite3 *_Nonnull _db_, virtual1_result_set_ref _Nullable *_Nonnull result_set);
#define virtual1_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define virtual1_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_virtual2 -6522400375940120872L

extern cql_string_ref _Nonnull virtual2_stored_procedure_name;

#define virtual2_data_types_count 2

#ifndef result_set_type_decl_virtual2_result_set
#define result_set_type_decl_virtual2_result_set 1
cql_result_set_type_decl(virtual2_result_set, virtual2_result_set_ref);
#endif
extern cql_int32 virtual2_get_vx(virtual2_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool virtual2_get_vy_is_null(virtual2_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 virtual2_get_vy_value(virtual2_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 virtual2_result_count(virtual2_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code virtual2_fetch_results(sqlite3 *_Nonnull _db_, virtual2_result_set_ref _Nullable *_Nonnull result_set);
#define virtual2_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define virtual2_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
// static void private_proc(cql_nullable_int32 *_Nonnull x);

// The statement ending at line XXXX
#define CRC_private_out_union -565460166543099256L

extern cql_string_ref _Nonnull private_out_union_stored_procedure_name;

#define private_out_union_data_types_count 1

#ifndef result_set_type_decl_private_out_union_result_set
#define result_set_type_decl_private_out_union_result_set 1
cql_result_set_type_decl(private_out_union_result_set, private_out_union_result_set_ref);
#endif
extern cql_int32 private_out_union_result_count(private_out_union_result_set_ref _Nonnull result_set);
#define private_out_union_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define private_out_union_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)
// static void private_out_union_fetch_results(private_out_union_result_set_ref _Nullable *_Nonnull _result_set_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code use_private_out_union(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
#define CRC_no_getters_out_union 9163025532430980765L

extern cql_string_ref _Nonnull no_getters_out_union_stored_procedure_name;

#define no_getters_out_union_data_types_count 1

#ifndef result_set_type_decl_no_getters_out_union_result_set
#define result_set_type_decl_no_getters_out_union_result_set 1
cql_result_set_type_decl(no_getters_out_union_result_set, no_getters_out_union_result_set_ref);
#endif
extern cql_int32 no_getters_out_union_result_count(no_getters_out_union_result_set_ref _Nonnull result_set);
#define no_getters_out_union_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define no_getters_out_union_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)
extern void no_getters_out_union_fetch_results(no_getters_out_union_result_set_ref _Nullable *_Nonnull _result_set_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code use_no_getters_out_union(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
#define CRC_suppress_results_out_union 3499927777655194670L

extern cql_string_ref _Nonnull suppress_results_out_union_stored_procedure_name;

#define suppress_results_out_union_data_types_count 1

#ifndef result_set_type_decl_suppress_results_out_union_result_set
#define result_set_type_decl_suppress_results_out_union_result_set 1
cql_result_set_type_decl(suppress_results_out_union_result_set, suppress_results_out_union_result_set_ref);
#endif
extern cql_int32 suppress_results_out_union_result_count(suppress_results_out_union_result_set_ref _Nonnull result_set);
#define suppress_results_out_union_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define suppress_results_out_union_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)
extern void suppress_results_out_union_fetch_results(suppress_results_out_union_result_set_ref _Nullable *_Nonnull _result_set_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code use_suppress_results_out_union(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern void set_out_arg_ref_test(cql_string_ref _Nullable *_Nonnull x);

// The statement ending at line XXXX
extern void set_out_arg_null_test(cql_nullable_int32 *_Nonnull x);

// The statement ending at line XXXX
extern void set_out_arg_notnull_test(cql_int32 *_Nonnull x);

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code early_close_cursor(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern void various_lets(void);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code try_catch_rc(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern void out_decl_test_3(cql_nullable_int32 x);

// The statement ending at line XXXX
extern void binary_ops_with_null(void);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code uses_throw(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code uses_ifnull_throw(sqlite3 *_Nonnull _db_, cql_nullable_int32 x);

// The statement ending at line XXXX
#define CRC_out_object 1794985861949478211L

extern cql_string_ref _Nonnull out_object_stored_procedure_name;

#define out_object_data_types_count 1

#ifndef result_set_type_decl_out_object_result_set
#define result_set_type_decl_out_object_result_set 1
cql_result_set_type_decl(out_object_result_set, out_object_result_set_ref);
#endif
extern cql_object_ref _Nonnull out_object_get_o(out_object_result_set_ref _Nonnull result_set);
extern cql_int32 out_object_result_count(out_object_result_set_ref _Nonnull result_set);
extern void out_object_fetch_results( out_object_result_set_ref _Nullable *_Nonnull result_set, cql_object_ref _Nonnull o);
#define out_object_hash(result_set) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), 0)
#define out_object_equal(rs1, rs2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  0, \
  (cql_result_set_ref)(rs2), \
  0)

// The statement ending at line XXXX
extern void exercise_contracts(cql_nullable_int32 a, cql_int32 b, cql_string_ref _Nullable c, cql_string_ref _Nonnull d, cql_blob_ref _Nullable e, cql_blob_ref _Nonnull f, cql_object_ref _Nullable g, cql_object_ref _Nonnull h, cql_nullable_int32 *_Nonnull i, cql_int32 *_Nonnull j, cql_string_ref _Nullable *_Nonnull k, cql_string_ref _Nullable *_Nonnull l, cql_nullable_int32 *_Nonnull m, cql_int32 *_Nonnull n, cql_string_ref _Nullable *_Nonnull o, cql_string_ref _Nonnull *_Nonnull p);

// The statement ending at line XXXX
extern void public_proc_with_a_contract(cql_string_ref _Nonnull t);

// The statement ending at line XXXX
// static void private_proc_without_a_contract(cql_string_ref _Nonnull t);

// The statement ending at line XXXX
#define CRC_result_set_proc_with_contract_in_fetch_results -2370781435236145144L

extern cql_string_ref _Nonnull result_set_proc_with_contract_in_fetch_results_stored_procedure_name;

#define result_set_proc_with_contract_in_fetch_results_data_types_count 5

#ifndef result_set_type_decl_result_set_proc_with_contract_in_fetch_results_result_set
#define result_set_type_decl_result_set_proc_with_contract_in_fetch_results_result_set 1
cql_result_set_type_decl(result_set_proc_with_contract_in_fetch_results_result_set, result_set_proc_with_contract_in_fetch_results_result_set_ref);
#endif
extern cql_int32 result_set_proc_with_contract_in_fetch_results_get_id(result_set_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_string_ref _Nullable result_set_proc_with_contract_in_fetch_results_get_name(result_set_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool result_set_proc_with_contract_in_fetch_results_get_rate_is_null(result_set_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int64 result_set_proc_with_contract_in_fetch_results_get_rate_value(result_set_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool result_set_proc_with_contract_in_fetch_results_get_type_is_null(result_set_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 result_set_proc_with_contract_in_fetch_results_get_type_value(result_set_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_bool result_set_proc_with_contract_in_fetch_results_get_size_is_null(result_set_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_double result_set_proc_with_contract_in_fetch_results_get_size_value(result_set_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 result_set_proc_with_contract_in_fetch_results_result_count(result_set_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code result_set_proc_with_contract_in_fetch_results_fetch_results(sqlite3 *_Nonnull _db_, result_set_proc_with_contract_in_fetch_results_result_set_ref _Nullable *_Nonnull result_set, cql_string_ref _Nonnull t);
#define result_set_proc_with_contract_in_fetch_results_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define result_set_proc_with_contract_in_fetch_results_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
#define CRC_out_proc_with_contract_in_fetch_results 4197072212473113909L

extern cql_string_ref _Nonnull out_proc_with_contract_in_fetch_results_stored_procedure_name;

#define out_proc_with_contract_in_fetch_results_data_types_count 5

#ifndef result_set_type_decl_out_proc_with_contract_in_fetch_results_result_set
#define result_set_type_decl_out_proc_with_contract_in_fetch_results_result_set 1
cql_result_set_type_decl(out_proc_with_contract_in_fetch_results_result_set, out_proc_with_contract_in_fetch_results_result_set_ref);
#endif
extern cql_int32 out_proc_with_contract_in_fetch_results_get_id(out_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set);
extern cql_string_ref _Nullable out_proc_with_contract_in_fetch_results_get_name(out_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set);
extern cql_bool out_proc_with_contract_in_fetch_results_get_rate_is_null(out_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set);
extern cql_int64 out_proc_with_contract_in_fetch_results_get_rate_value(out_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set);
extern cql_bool out_proc_with_contract_in_fetch_results_get_type_is_null(out_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set);
extern cql_int32 out_proc_with_contract_in_fetch_results_get_type_value(out_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set);
extern cql_bool out_proc_with_contract_in_fetch_results_get_size_is_null(out_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set);
extern cql_double out_proc_with_contract_in_fetch_results_get_size_value(out_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set);
extern cql_int32 out_proc_with_contract_in_fetch_results_result_count(out_proc_with_contract_in_fetch_results_result_set_ref _Nonnull result_set);
extern void out_proc_with_contract_in_fetch_results_fetch_results( out_proc_with_contract_in_fetch_results_result_set_ref _Nullable *_Nonnull result_set, cql_string_ref _Nonnull t);
#define out_proc_with_contract_in_fetch_results_hash(result_set) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), 0)
#define out_proc_with_contract_in_fetch_results_equal(rs1, rs2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  0, \
  (cql_result_set_ref)(rs2), \
  0)

// The statement ending at line XXXX
#define CRC_nullability_improvements_are_erased_for_sql -6535467785075335629L

extern cql_string_ref _Nonnull nullability_improvements_are_erased_for_sql_stored_procedure_name;

#define nullability_improvements_are_erased_for_sql_data_types_count 1

#ifndef result_set_type_decl_nullability_improvements_are_erased_for_sql_result_set
#define result_set_type_decl_nullability_improvements_are_erased_for_sql_result_set 1
cql_result_set_type_decl(nullability_improvements_are_erased_for_sql_result_set, nullability_improvements_are_erased_for_sql_result_set_ref);
#endif
extern cql_int32 nullability_improvements_are_erased_for_sql_get_b(nullability_improvements_are_erased_for_sql_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 nullability_improvements_are_erased_for_sql_result_count(nullability_improvements_are_erased_for_sql_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code nullability_improvements_are_erased_for_sql_fetch_results(sqlite3 *_Nonnull _db_, nullability_improvements_are_erased_for_sql_result_set_ref _Nullable *_Nonnull result_set);
#define nullability_improvements_are_erased_for_sql_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define nullability_improvements_are_erased_for_sql_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
extern void nullability_improvements_do_not_change_access(void);

// The statement ending at line XXXX
extern cql_bool true_test;

// The statement ending at line XXXX
extern cql_bool false_test;

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX

// The statement ending at line XXXX
extern CQL_WARN_UNUSED cql_code BigFormat(sqlite3 *_Nonnull _db_);

// The statement ending at line XXXX
extern cql_int32 sign_val_int;

// The statement ending at line XXXX
extern cql_nullable_int32 sign_val_nullable;

// The statement ending at line XXXX
extern cql_int32 abs_val_int;

// The statement ending at line XXXX
extern cql_nullable_int32 abs_val_nullable;

// The statement ending at line XXXX
extern cql_int64 abs_val_long;

// The statement ending at line XXXX
extern cql_double abs_val_real;

// The statement ending at line XXXX
extern cql_bool abs_val_bool;

// The statement ending at line XXXX

// The statement ending at line XXXX
extern void ltor_proc_int_not_null(cql_int32 a, cql_int32 b, cql_int32 *_Nonnull c);

// The statement ending at line XXXX
extern void ltor_proc_int(cql_nullable_int32 a, cql_nullable_int32 b, cql_nullable_int32 *_Nonnull c);

// The statement ending at line XXXX
extern void ltor_proc_text_not_null(cql_string_ref _Nonnull a, cql_string_ref _Nonnull b, cql_string_ref _Nullable *_Nonnull c);

// The statement ending at line XXXX
extern void ltor_proc_text(cql_string_ref _Nullable a, cql_string_ref _Nullable b, cql_string_ref _Nullable *_Nonnull c);

// The statement ending at line XXXX
extern cql_int32 ltor_func_int_not_null(cql_int32 a, cql_int32 b);

// The statement ending at line XXXX
extern cql_nullable_int32 ltor_func_int(cql_nullable_int32 a, cql_nullable_int32 b);

// The statement ending at line XXXX
extern cql_string_ref _Nonnull ltor_func_text_not_null(cql_string_ref _Nonnull a, cql_string_ref _Nonnull b);

// The statement ending at line XXXX
extern cql_string_ref _Nullable ltor_func_text(cql_string_ref _Nullable a, cql_string_ref _Nullable b);

// The statement ending at line XXXX
extern void arguments_are_evaluated_left_to_right(void);

// The statement ending at line XXXX
#define CRC_sensitive_function_is_a_no_op 2318206562698552930L

extern cql_string_ref _Nonnull sensitive_function_is_a_no_op_stored_procedure_name;

#define sensitive_function_is_a_no_op_data_types_count 1

#ifndef result_set_type_decl_sensitive_function_is_a_no_op_result_set
#define result_set_type_decl_sensitive_function_is_a_no_op_result_set 1
cql_result_set_type_decl(sensitive_function_is_a_no_op_result_set, sensitive_function_is_a_no_op_result_set_ref);
#endif
extern cql_string_ref _Nonnull sensitive_function_is_a_no_op_get_y(sensitive_function_is_a_no_op_result_set_ref _Nonnull result_set, cql_int32 row);
extern cql_int32 sensitive_function_is_a_no_op_result_count(sensitive_function_is_a_no_op_result_set_ref _Nonnull result_set);
extern CQL_WARN_UNUSED cql_code sensitive_function_is_a_no_op_fetch_results(sqlite3 *_Nonnull _db_, sensitive_function_is_a_no_op_result_set_ref _Nullable *_Nonnull result_set);
#define sensitive_function_is_a_no_op_row_hash(result_set, row) cql_result_set_get_meta((cql_result_set_ref)(result_set))->rowHash((cql_result_set_ref)(result_set), row)
#define sensitive_function_is_a_no_op_row_equal(rs1, row1, rs2, row2) \
cql_result_set_get_meta((cql_result_set_ref)(rs1))->rowsEqual( \
  (cql_result_set_ref)(rs1), \
  row1, \
  (cql_result_set_ref)(rs2), \
  row2)

// The statement ending at line XXXX
extern cql_int32 this_is_the_end;

// The statement ending at line XXXX
extern void end_proc(void);

// The statement ending at line XXXX
extern cql_nullable_int32 end_marker;
