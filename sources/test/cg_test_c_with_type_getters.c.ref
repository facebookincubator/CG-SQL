
#include "out/cg_test_c_with_type_getters.h"

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunknown-warning-option"
#pragma clang diagnostic ignored "-Wbitwise-op-parentheses"
#pragma clang diagnostic ignored "-Wshift-op-parentheses"
#pragma clang diagnostic ignored "-Wlogical-not-parentheses"
#pragma clang diagnostic ignored "-Wlogical-op-parentheses"
#pragma clang diagnostic ignored "-Wliteral-conversion"
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#pragma clang diagnostic ignored "-Wunused-function"
extern cql_object_ref _Nonnull cql_partition_create(void);
extern cql_bool cql_partition_cursor(cql_object_ref _Nonnull p, cql_dynamic_cursor *_Nonnull key, cql_dynamic_cursor *_Nonnull value);
extern cql_object_ref _Nonnull cql_extract_partition(cql_object_ref _Nonnull p, cql_dynamic_cursor *_Nonnull key);
extern CQL_WARN_UNUSED cql_code selector(sqlite3 *_Nonnull _db_, sqlite3_stmt *_Nullable *_Nonnull _result_stmt);

#ifndef row_type_decl_emit_object_result_set_row
#define row_type_decl_emit_object_result_set_row 1
typedef struct emit_object_result_set_row {
  cql_bool _has_row_;
  cql_uint16 _refs_count_;
  cql_uint16 _refs_offset_;
  cql_object_ref _Nonnull o;
} emit_object_result_set_row;
#endif
extern CQL_WARN_UNUSED cql_code sproc_copy_func(sqlite3 *_Nonnull _db_, sqlite3_stmt *_Nullable *_Nonnull _result_stmt);

#ifndef row_type_decl_emit_object_with_setters_row
#define row_type_decl_emit_object_with_setters_row 1
typedef struct emit_object_with_setters_row {
  cql_bool _has_row_;
  cql_uint16 _refs_count_;
  cql_uint16 _refs_offset_;
  cql_object_ref _Nonnull o;
} emit_object_with_setters_row;
#endif
extern void emit_object_with_setters(cql_object_ref _Nonnull o, emit_object_with_setters_row *_Nonnull _result_);

// The statement ending at line XXXX

/*
CREATE PROC selector ()
BEGIN
  SELECT *
    FROM foo;
END;
*/

#define _PROC_ "selector"
static int32_t selector_perf_index;

cql_string_proc_name(selector_stored_procedure_name, "selector");

typedef struct selector_row {
  cql_int32 f1;
  cql_double f3;
  cql_bool f4;
  cql_int64 f5;
  cql_nullable_int32 g1;
  cql_nullable_double g3;
  cql_nullable_bool g4;
  cql_nullable_int64 g5;
  cql_string_ref _Nonnull f2;
  cql_blob_ref _Nonnull f6;
  cql_string_ref _Nullable g2;
  cql_blob_ref _Nullable g6;
} selector_row;

uint8_t selector_data_types[selector_data_types_count] = {
  CQL_DATA_TYPE_INT32 | CQL_DATA_TYPE_NOT_NULL, // f1
  CQL_DATA_TYPE_STRING | CQL_DATA_TYPE_NOT_NULL, // f2
  CQL_DATA_TYPE_DOUBLE | CQL_DATA_TYPE_NOT_NULL, // f3
  CQL_DATA_TYPE_BOOL | CQL_DATA_TYPE_NOT_NULL, // f4
  CQL_DATA_TYPE_INT64 | CQL_DATA_TYPE_NOT_NULL, // f5
  CQL_DATA_TYPE_BLOB | CQL_DATA_TYPE_NOT_NULL, // f6
  CQL_DATA_TYPE_INT32, // g1
  CQL_DATA_TYPE_STRING, // g2
  CQL_DATA_TYPE_DOUBLE, // g3
  CQL_DATA_TYPE_BOOL, // g4
  CQL_DATA_TYPE_INT64, // g5
  CQL_DATA_TYPE_BLOB, // g6
};

#define selector_refs_offset cql_offsetof(selector_row, f2) // count = 4

static cql_uint16 selector_col_offsets[] = { 12,
  cql_offsetof(selector_row, f1),
  cql_offsetof(selector_row, f2),
  cql_offsetof(selector_row, f3),
  cql_offsetof(selector_row, f4),
  cql_offsetof(selector_row, f5),
  cql_offsetof(selector_row, f6),
  cql_offsetof(selector_row, g1),
  cql_offsetof(selector_row, g2),
  cql_offsetof(selector_row, g3),
  cql_offsetof(selector_row, g4),
  cql_offsetof(selector_row, g5),
  cql_offsetof(selector_row, g6)
};

cql_int32 selector_result_count(selector_result_set_ref _Nonnull result_set) {
  return cql_result_set_get_count((cql_result_set_ref)result_set);
}

CQL_WARN_UNUSED cql_code selector_fetch_results(sqlite3 *_Nonnull _db_, selector_result_set_ref _Nullable *_Nonnull result_set) {
  sqlite3_stmt *stmt = NULL;
  cql_profile_start(CRC_selector, &selector_perf_index);
  cql_code rc = selector(_db_, &stmt);
  cql_fetch_info info = {
    .rc = rc,
    .db = _db_,
    .stmt = stmt,
    .data_types = selector_data_types,
    .col_offsets = selector_col_offsets,
    .refs_count = 4,
    .refs_offset = selector_refs_offset,
    .encode_context_index = -1,
    .rowsize = sizeof(selector_row),
    .crc = CRC_selector,
    .perf_index = &selector_perf_index,
  };
  return cql_fetch_all_results(&info, (cql_result_set_ref *)result_set);
}

// export: DECLARE PROC selector () (f1 INTEGER NOT NULL, f2 TEXT NOT NULL, f3 REAL NOT NULL, f4 BOOL NOT NULL, f5 LONG_INT NOT NULL, f6 BLOB NOT NULL, g1 INTEGER, g2 TEXT, g3 REAL, g4 BOOL, g5 LONG_INT, g6 BLOB);
CQL_WARN_UNUSED cql_code selector(sqlite3 *_Nonnull _db_, sqlite3_stmt *_Nullable *_Nonnull _result_stmt) {
  cql_code _rc_ = SQLITE_OK;
  *_result_stmt = NULL;
  _rc_ = cql_prepare(_db_, _result_stmt,
    "SELECT f1, f2, f3, f4, f5, f6, g1, g2, g3, g4, g5, g6 "
      "FROM foo");
  if (_rc_ != SQLITE_OK) { cql_error_trace(); goto cql_cleanup; }
  _rc_ = SQLITE_OK;

cql_cleanup:
  if (_rc_ == SQLITE_OK && !*_result_stmt) _rc_ = cql_no_rows_stmt(_db_, _result_stmt);
  return _rc_;
}
#undef _PROC_

// The statement ending at line XXXX

/*
@ATTRIBUTE(cql:base_fragment=frag_test)
CREATE PROC baseline ()
BEGIN
  WITH
  frag_test (id) AS (SELECT 1 AS id)
  SELECT *
    FROM frag_test;
END;
*/

// The statement ending at line XXXX

/*
@ATTRIBUTE(cql:extension_fragment=frag_test)
CREATE PROC ext ()
BEGIN
  WITH
  frag_test (id) AS (SELECT 1 AS id),
  ext (id, f2) AS (SELECT frag_test.*, f2
    FROM frag_test
    LEFT OUTER JOIN foo ON f1 = id)
  SELECT *
    FROM ext;
END;
*/

// The statement ending at line XXXX

/*
@ATTRIBUTE(cql:extension_fragment=frag_test)
CREATE PROC ext2 ()
BEGIN
  WITH
  frag_test (id) AS (SELECT 1 AS id),
  ext2 (id, f3) AS (SELECT frag_test.*, f3
    FROM frag_test
    LEFT OUTER JOIN foo ON f1 = id)
  SELECT *
    FROM ext2;
END;
*/

// The statement ending at line XXXX

/*
CREATE PROC emit_object_result_set (o OBJECT NOT NULL)
BEGIN
  DECLARE C CURSOR LIKE emit_object_result_set ARGUMENTS;
  FETCH C(o) FROM VALUES(o);
  OUT UNION C;
END;
*/

#define _PROC_ "emit_object_result_set_fetch_results"

#define emit_object_result_set_refs_offset cql_offsetof(emit_object_result_set_row, o) // count = 1
static int32_t emit_object_result_set_perf_index;

cql_string_proc_name(emit_object_result_set_stored_procedure_name, "emit_object_result_set");

uint8_t emit_object_result_set_data_types[emit_object_result_set_data_types_count] = {
  CQL_DATA_TYPE_OBJECT | CQL_DATA_TYPE_NOT_NULL, // o
};

#define emit_object_result_set_refs_offset cql_offsetof(emit_object_result_set_row, o) // count = 1

static cql_uint16 emit_object_result_set_col_offsets[] = { 1,
  cql_offsetof(emit_object_result_set_row, o)
};

cql_int32 emit_object_result_set_result_count(emit_object_result_set_result_set_ref _Nonnull result_set) {
  return cql_result_set_get_count((cql_result_set_ref)result_set);
}
cql_fetch_info emit_object_result_set_info = {
  .rc = SQLITE_OK,
  .data_types = emit_object_result_set_data_types,
  .col_offsets = emit_object_result_set_col_offsets,
  .refs_count = 1,
  .refs_offset = emit_object_result_set_refs_offset,
  .encode_context_index = -1,
  .rowsize = sizeof(emit_object_result_set_row),
  .crc = CRC_emit_object_result_set,
  .perf_index = &emit_object_result_set_perf_index,
};
// export: DECLARE PROC emit_object_result_set (o OBJECT NOT NULL) OUT UNION (o OBJECT NOT NULL);

typedef struct emit_object_result_set_C_row {
  cql_bool _has_row_;
  cql_uint16 _refs_count_;
  cql_uint16 _refs_offset_;
  cql_object_ref _Nonnull o;
} emit_object_result_set_C_row;

#define emit_object_result_set_C_refs_offset cql_offsetof(emit_object_result_set_C_row, o) // count = 1
void emit_object_result_set_fetch_results(emit_object_result_set_result_set_ref _Nullable *_Nonnull _result_set_, cql_object_ref _Nonnull o) {
  cql_contract_argument_notnull((void *)o, 1);

  cql_bytebuf _rows_;
  cql_bytebuf_open(&_rows_);
  *_result_set_ = NULL;
  emit_object_result_set_C_row C = { ._refs_count_ = 1, ._refs_offset_ = emit_object_result_set_C_refs_offset };

  cql_profile_start(CRC_emit_object_result_set, &emit_object_result_set_perf_index);
  C._has_row_ = 1;
  cql_set_object_ref(&C.o, o);
  cql_retain_row(C);
  if (C._has_row_) cql_bytebuf_append(&_rows_, (const void *)&C, sizeof(C));

  cql_results_from_data(SQLITE_OK, &_rows_, &emit_object_result_set_info, (cql_result_set_ref *)_result_set_);
  cql_teardown_row(C);
}
#undef _PROC_

// The statement ending at line XXXX

/*
@ATTRIBUTE(cql:generate_copy)
CREATE PROC sproc_copy_func ()
BEGIN
  SELECT *
    FROM foo;
END;
*/

#define _PROC_ "sproc_copy_func"
static int32_t sproc_copy_func_perf_index;

cql_string_proc_name(sproc_copy_func_stored_procedure_name, "sproc_copy_func");

typedef struct sproc_copy_func_row {
  cql_int32 f1;
  cql_double f3;
  cql_bool f4;
  cql_int64 f5;
  cql_nullable_int32 g1;
  cql_nullable_double g3;
  cql_nullable_bool g4;
  cql_nullable_int64 g5;
  cql_string_ref _Nonnull f2;
  cql_blob_ref _Nonnull f6;
  cql_string_ref _Nullable g2;
  cql_blob_ref _Nullable g6;
} sproc_copy_func_row;

uint8_t sproc_copy_func_data_types[sproc_copy_func_data_types_count] = {
  CQL_DATA_TYPE_INT32 | CQL_DATA_TYPE_NOT_NULL, // f1
  CQL_DATA_TYPE_STRING | CQL_DATA_TYPE_NOT_NULL, // f2
  CQL_DATA_TYPE_DOUBLE | CQL_DATA_TYPE_NOT_NULL, // f3
  CQL_DATA_TYPE_BOOL | CQL_DATA_TYPE_NOT_NULL, // f4
  CQL_DATA_TYPE_INT64 | CQL_DATA_TYPE_NOT_NULL, // f5
  CQL_DATA_TYPE_BLOB | CQL_DATA_TYPE_NOT_NULL, // f6
  CQL_DATA_TYPE_INT32, // g1
  CQL_DATA_TYPE_STRING, // g2
  CQL_DATA_TYPE_DOUBLE, // g3
  CQL_DATA_TYPE_BOOL, // g4
  CQL_DATA_TYPE_INT64, // g5
  CQL_DATA_TYPE_BLOB, // g6
};

#define sproc_copy_func_refs_offset cql_offsetof(sproc_copy_func_row, f2) // count = 4

static cql_uint16 sproc_copy_func_col_offsets[] = { 12,
  cql_offsetof(sproc_copy_func_row, f1),
  cql_offsetof(sproc_copy_func_row, f2),
  cql_offsetof(sproc_copy_func_row, f3),
  cql_offsetof(sproc_copy_func_row, f4),
  cql_offsetof(sproc_copy_func_row, f5),
  cql_offsetof(sproc_copy_func_row, f6),
  cql_offsetof(sproc_copy_func_row, g1),
  cql_offsetof(sproc_copy_func_row, g2),
  cql_offsetof(sproc_copy_func_row, g3),
  cql_offsetof(sproc_copy_func_row, g4),
  cql_offsetof(sproc_copy_func_row, g5),
  cql_offsetof(sproc_copy_func_row, g6)
};

cql_int32 sproc_copy_func_result_count(sproc_copy_func_result_set_ref _Nonnull result_set) {
  return cql_result_set_get_count((cql_result_set_ref)result_set);
}

CQL_WARN_UNUSED cql_code sproc_copy_func_fetch_results(sqlite3 *_Nonnull _db_, sproc_copy_func_result_set_ref _Nullable *_Nonnull result_set) {
  sqlite3_stmt *stmt = NULL;
  cql_profile_start(CRC_sproc_copy_func, &sproc_copy_func_perf_index);
  cql_code rc = sproc_copy_func(_db_, &stmt);
  cql_fetch_info info = {
    .rc = rc,
    .db = _db_,
    .stmt = stmt,
    .data_types = sproc_copy_func_data_types,
    .col_offsets = sproc_copy_func_col_offsets,
    .refs_count = 4,
    .refs_offset = sproc_copy_func_refs_offset,
    .encode_context_index = -1,
    .rowsize = sizeof(sproc_copy_func_row),
    .crc = CRC_sproc_copy_func,
    .perf_index = &sproc_copy_func_perf_index,
  };
  return cql_fetch_all_results(&info, (cql_result_set_ref *)result_set);
}

// export: DECLARE PROC sproc_copy_func () (f1 INTEGER NOT NULL, f2 TEXT NOT NULL, f3 REAL NOT NULL, f4 BOOL NOT NULL, f5 LONG_INT NOT NULL, f6 BLOB NOT NULL, g1 INTEGER, g2 TEXT, g3 REAL, g4 BOOL, g5 LONG_INT, g6 BLOB);
CQL_WARN_UNUSED cql_code sproc_copy_func(sqlite3 *_Nonnull _db_, sqlite3_stmt *_Nullable *_Nonnull _result_stmt) {
  cql_code _rc_ = SQLITE_OK;
  *_result_stmt = NULL;
  _rc_ = cql_prepare(_db_, _result_stmt,
    "SELECT f1, f2, f3, f4, f5, f6, g1, g2, g3, g4, g5, g6 "
      "FROM foo");
  if (_rc_ != SQLITE_OK) { cql_error_trace(); goto cql_cleanup; }
  _rc_ = SQLITE_OK;

cql_cleanup:
  if (_rc_ == SQLITE_OK && !*_result_stmt) _rc_ = cql_no_rows_stmt(_db_, _result_stmt);
  return _rc_;
}
#undef _PROC_

// The statement ending at line XXXX

/*
@ATTRIBUTE(cql:emit_setters)
CREATE PROC emit_object_with_setters (o OBJECT NOT NULL)
BEGIN
  DECLARE C CURSOR LIKE emit_object_with_setters ARGUMENTS;
  FETCH C(o) FROM VALUES(o);
  OUT C;
END;
*/

#define _PROC_ "emit_object_with_setters"

#define emit_object_with_setters_refs_offset cql_offsetof(emit_object_with_setters_row, o) // count = 1
static int32_t emit_object_with_setters_perf_index;

cql_string_proc_name(emit_object_with_setters_stored_procedure_name, "emit_object_with_setters");

uint8_t emit_object_with_setters_data_types[emit_object_with_setters_data_types_count] = {
  CQL_DATA_TYPE_OBJECT | CQL_DATA_TYPE_NOT_NULL, // o
};

static cql_uint16 emit_object_with_setters_col_offsets[] = { 1,
  cql_offsetof(emit_object_with_setters_row, o)
};

cql_int32 emit_object_with_setters_result_count(emit_object_with_setters_result_set_ref _Nonnull result_set) {
  return cql_result_set_get_count((cql_result_set_ref)result_set);
}

void emit_object_with_setters_fetch_results( emit_object_with_setters_result_set_ref _Nullable *_Nonnull result_set, cql_object_ref _Nonnull o) {
  cql_profile_start(CRC_emit_object_with_setters, &emit_object_with_setters_perf_index);
  *result_set = NULL;
  emit_object_with_setters_row *row = (emit_object_with_setters_row *)calloc(1, sizeof(emit_object_with_setters_row));
  emit_object_with_setters(o, row);
  cql_fetch_info info = {
    .rc = SQLITE_OK,
    .data_types = emit_object_with_setters_data_types,
    .col_offsets = emit_object_with_setters_col_offsets,
    .refs_count = 1,
    .refs_offset = emit_object_with_setters_refs_offset,
    .encode_context_index = -1,
    .rowsize = sizeof(emit_object_with_setters_row),
    .crc = CRC_emit_object_with_setters,
    .perf_index = &emit_object_with_setters_perf_index,
  };
  cql_one_row_result(&info, (char *)row, row->_has_row_, (cql_result_set_ref *)result_set);
}

// export: DECLARE PROC emit_object_with_setters (o OBJECT NOT NULL) OUT (o OBJECT NOT NULL);

typedef struct emit_object_with_setters_C_row {
  cql_bool _has_row_;
  cql_uint16 _refs_count_;
  cql_uint16 _refs_offset_;
  cql_object_ref _Nonnull o;
} emit_object_with_setters_C_row;

#define emit_object_with_setters_C_refs_offset cql_offsetof(emit_object_with_setters_C_row, o) // count = 1
void emit_object_with_setters(cql_object_ref _Nonnull o, emit_object_with_setters_row *_Nonnull _result_) {
  cql_contract_argument_notnull((void *)o, 1);

  memset(_result_, 0, sizeof(*_result_));
  emit_object_with_setters_C_row C = { ._refs_count_ = 1, ._refs_offset_ = emit_object_with_setters_C_refs_offset };

  C._has_row_ = 1;
  cql_set_object_ref(&C.o, o);
  _result_->_has_row_ = C._has_row_;
  _result_->_refs_count_ = 1;
  _result_->_refs_offset_ = emit_object_with_setters_refs_offset;
  cql_set_object_ref(&_result_->o, C.o);

  cql_teardown_row(C);
}
#undef _PROC_
#pragma clang diagnostic pop
