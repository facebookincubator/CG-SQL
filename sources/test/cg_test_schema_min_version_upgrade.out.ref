
-- no columns will be considered hidden in this script
-- DDL in procs will not count as declarations
@SCHEMA_UPGRADE_SCRIPT;

-- schema crc -3139502500644660849

-- declare facet helpers-- 
DECLARE facet_data TYPE LONG<facet_data> not null;
DECLARE test_facets facet_data;
DECLARE FUNCTION cql_facets_new() facet_data;
DECLARE PROCEDURE cql_facets_delete(facets facet_data);
DECLARE FUNCTION cql_facet_add(facets facet_data, facet TEXT NOT NULL, crc LONG NOT NULL) BOOL NOT NULL;
DECLARE FUNCTION cql_facet_find(facets facet_data, facet TEXT NOT NULL) LONG NOT NULL;

-- declare sqlite_master -- 
CREATE TABLE sqlite_master (
  type TEXT NOT NULL,
  name TEXT NOT NULL,
  tbl_name TEXT NOT NULL,
  rootpage INTEGER NOT NULL,
  sql TEXT NOT NULL
);

-- declare full schema of tables and views to be upgraded and their dependencies -- 
DECLARE SELECT FUNC filter_ (id INTEGER) INTEGER NOT NULL;

@DECLARE_SCHEMA_REGION shared;

@DECLARE_SCHEMA_REGION extra USING shared;

@DECLARE_SCHEMA_REGION other;

@begin_schema_region shared;
CREATE TABLE foo(
  id INTEGER PRIMARY KEY,
  rate LONG_INT @DELETE(5),
  rate_2 LONG_INT @DELETE(4, DeleteRate2Proc),
  id2 INTEGER DEFAULT 12345 @CREATE(4, CreateId2Proc),
  name TEXT @CREATE(5),
  name_2 TEXT @CREATE(6)
);
@end_schema_region;

@begin_schema_region shared;
CREATE TABLE added_table(
  id INTEGER NOT NULL,
  name1 TEXT,
  name2 TEXT @CREATE(4)
) @CREATE(3) @DELETE(5);
@end_schema_region;

@begin_schema_region shared;
CREATE TABLE g1(
  id INTEGER PRIMARY KEY,
  name TEXT
) @RECREATE(gr1);
@end_schema_region;

@begin_schema_region shared;
CREATE TABLE use_g1(
  id INTEGER PRIMARY KEY REFERENCES g1 (id),
  name2 TEXT
) @RECREATE(gr1);
@end_schema_region;

@begin_schema_region extra;
CREATE TABLE table2(
  id INTEGER NOT NULL REFERENCES foo (id),
  name1 TEXT @CREATE(2, CreateName1Proc),
  name2 TEXT @CREATE(2, CreateName2Proc),
  name3 TEXT @CREATE(2),
  name4 TEXT @CREATE(2)
);
@end_schema_region;

@begin_schema_region other;
CREATE TABLE other_table(
  id INTEGER
);
@end_schema_region;

CREATE TABLE table_to_recreate(
  id INTEGER NOT NULL,
  name TEXT
) @RECREATE;

CREATE TABLE grouped_table_1(
  id INTEGER NOT NULL,
  name TEXT
) @RECREATE(my_group);

CREATE TABLE grouped_table_2(
  id INTEGER NOT NULL,
  name TEXT
) @RECREATE(my_group);

CREATE TABLE grouped_table_3(
  id INTEGER NOT NULL,
  name TEXT
) @RECREATE(my_group);

CREATE TABLE t5(
  id LONG_INT PRIMARY KEY AUTOINCREMENT,
  data TEXT
);

CREATE TABLE t6(
  id LONG_INT PRIMARY KEY,
  FOREIGN KEY (id) REFERENCES t5 (id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE VIRTUAL TABLE a_virtual_table USING a_module (this, that, the_other) AS (
  id INTEGER @SENSITIVE,
  t TEXT
);

CREATE VIRTUAL TABLE @EPONYMOUS epon USING epon AS (
  id INTEGER @SENSITIVE,
  t TEXT
);

CREATE VIRTUAL TABLE complex_virtual_table USING a_module (ARGUMENTS FOLLOWING) AS (
  id INTEGER @SENSITIVE,
  t TEXT
);

CREATE VIRTUAL TABLE deleted_virtual_table USING a_module (ARGUMENTS FOLLOWING) AS (
  id INTEGER @SENSITIVE,
  t TEXT
) @DELETE(4, cql:module_must_not_be_deleted_see_docs_for_CQL0392);

CREATE TABLE migrated_from_recreate(
  id INTEGER,
  t TEXT
) @CREATE(4, cql:from_recreate);

CREATE TABLE conflict_clause_t(
  id INTEGER NOT NULL ON CONFLICT FAIL
);

CREATE TABLE conflict_clause_pk(
  id INTEGER NOT NULL,
  CONSTRAINT pk1 PRIMARY KEY (id) ON CONFLICT ROLLBACK
);

CREATE TABLE expression_pk(
  id INTEGER NOT NULL,
  CONSTRAINT pk1 PRIMARY KEY (id / 2, id % 2)
);

CREATE TABLE expression_uk(
  id INTEGER NOT NULL,
  CONSTRAINT uk1 UNIQUE (id / 2, id % 2)
);

CREATE TABLE delete__second(
  id INTEGER PRIMARY KEY
) @DELETE(7);

CREATE TABLE delete_first(
  id INTEGER REFERENCES delete__second (id)
) @DELETE(7);

CREATE TABLE create_first(
  id INTEGER PRIMARY KEY
) @CREATE(7);

CREATE TABLE create__second(
  id INTEGER REFERENCES create_first (id)
) @CREATE(7);

@begin_schema_region shared;
CREATE VIEW shared_view AS
SELECT *
  FROM foo;
@end_schema_region;

@begin_schema_region shared;
CREATE VIEW live_view AS
SELECT *
  FROM foo;
@end_schema_region;

@begin_schema_region shared;
CREATE VIEW dead_view AS
SELECT *
  FROM foo @DELETE(2, DeadViewMigration);
@end_schema_region;

@begin_schema_region extra;
CREATE VIEW another_live_view AS
SELECT *
  FROM table2;
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX shared_index ON foo (name, name_2);
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX gr1_index ON g1 (name);
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX gr1_index2 ON g1 (name, id);
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX gr1_index3 ON g1 (name, id) @DELETE(5);
@end_schema_region;

@begin_schema_region extra;
CREATE INDEX not_shared_present_index ON table2 (name1, name2);
@end_schema_region;

@begin_schema_region extra;
CREATE INDEX index_going_away ON table2 (name3) @DELETE(3);
@end_schema_region;

@begin_schema_region shared;
CREATE TRIGGER shared_trigger
  BEFORE INSERT ON foo
BEGIN
SELECT 1;
END;
@end_schema_region;

@begin_schema_region extra;
CREATE TRIGGER not_shared_trigger
  BEFORE INSERT ON foo
BEGIN
SELECT new.id;
END;
@end_schema_region;

@begin_schema_region shared;
CREATE TRIGGER insert_trigger
  BEFORE INSERT ON foo
  FOR EACH ROW
  WHEN new.id > 7
BEGIN
SELECT new.id;
END;
@end_schema_region;

@begin_schema_region shared;
CREATE TRIGGER old_trigger_was_deleted
  BEFORE INSERT ON foo
BEGIN
SELECT new.id;
END @DELETE(3);
@end_schema_region;

CREATE TRIGGER trig_with_filter
  BEFORE INSERT ON foo
  WHEN filter_(new.id) = 3
BEGIN
DELETE FROM foo WHERE id = 77;
END;

@begin_schema_region shared;
@SCHEMA_AD_HOC_MIGRATION(5, MyAdHocMigrationScript);
@end_schema_region;

-- facets table declaration --
CREATE TABLE IF NOT EXISTS test_cql_schema_facets(
  facet TEXT NOT NULL PRIMARY KEY,
  version LONG INTEGER NOT NULL
);

-- helper proc for getting the schema version of a facet
CREATE PROCEDURE test_cql_get_facet_version(_facet TEXT NOT NULL, out _version LONG INTEGER NOT NULL)
BEGIN
  BEGIN TRY
    SET _version := (SELECT version FROM test_cql_schema_facets WHERE facet = _facet LIMIT 1 IF NOTHING -1);
  END TRY;
  BEGIN CATCH
    SET _version := -1;
  END CATCH;
END;

-- saved facets table declaration --
CREATE TEMP TABLE test_cql_schema_facets_saved(
  facet TEXT NOT NULL PRIMARY KEY,
  version LONG INTEGER NOT NULL
);

-- helper proc for testing for the presence of a column/type
@attribute(cql:private)
CREATE PROCEDURE test_check_column_exists(table_name TEXT NOT NULL, decl TEXT NOT NULL, OUT present BOOL NOT NULL)
BEGIN
  SET present := (SELECT EXISTS(SELECT * FROM sqlite_master WHERE tbl_name = table_name AND sql GLOB decl));
END;

-- helper proc for creating the schema version table
@attribute(cql:private)
CREATE PROCEDURE test_create_cql_schema_facets_if_needed()
BEGIN
  CREATE TABLE IF NOT EXISTS test_cql_schema_facets(
    facet TEXT NOT NULL PRIMARY KEY,
    version LONG INTEGER NOT NULL
  );
END;

-- helper proc for saving the schema version table
@attribute(cql:private)
CREATE PROCEDURE test_save_cql_schema_facets()
BEGIN
  DROP TABLE IF EXISTS test_cql_schema_facets_saved;
  CREATE TEMP TABLE test_cql_schema_facets_saved(
    facet TEXT NOT NULL PRIMARY KEY,
    version LONG INTEGER NOT NULL
  );
  INSERT INTO test_cql_schema_facets_saved
    SELECT * FROM test_cql_schema_facets;
END;

-- helper proc for setting the schema version of a facet
CREATE PROCEDURE test_cql_set_facet_version(_facet TEXT NOT NULL, _version LONG INTEGER NOT NULL)
BEGIN
  INSERT OR REPLACE INTO test_cql_schema_facets (facet, version) VALUES(_facet, _version);
END;

-- helper proc for getting the schema version CRC for a version index
@attribute(cql:private)
CREATE PROCEDURE test_cql_get_version_crc(_v INTEGER NOT NULL, out _crc LONG INTEGER NOT NULL)
BEGIN
  SET _crc := cql_facet_find(test_facets, printf('cql_schema_v%d', _v));
END;

-- helper proc for setting the schema version CRC for a version index
CREATE PROCEDURE test_cql_set_version_crc(_v INTEGER NOT NULL, _crc LONG INTEGER NOT NULL)
BEGIN
  INSERT OR REPLACE INTO test_cql_schema_facets (facet, version) VALUES('cql_schema_v'||_v, _crc);
END;

-- helper proc to reset any triggers that are on the old plan --
DECLARE PROCEDURE cql_exec_internal(sql TEXT NOT NULL) USING TRANSACTION;

-- declared upgrade procedures if any
DECLARE PROC RecreateGroup1Migration() USING TRANSACTION;
DECLARE PROC CreateId2Proc() USING TRANSACTION;
DECLARE PROC DeleteRate2Proc() USING TRANSACTION;
DECLARE PROC MyAdHocMigrationScript() USING TRANSACTION;
@attribute(cql:private)
CREATE PROCEDURE test_cql_one_time_drop(name TEXT NOT NULL, version INTEGER NOT NULL)
BEGIN
  LET facet := printf('1_time_drop_%s', name);
  IF cql_facet_find(test_facets, facet) != version THEN
    call cql_exec_internal(printf('DROP TABLE IF EXISTS %s;', name));
    call test_cql_set_facet_version(facet, version);
  END IF;
END;


-- drop all the views we know
@attribute(cql:private)
CREATE PROCEDURE test_cql_drop_all_views()
BEGIN
  DROP VIEW IF EXISTS shared_view;
  DROP VIEW IF EXISTS live_view;
  DROP VIEW IF EXISTS dead_view;
  DROP VIEW IF EXISTS another_live_view;
END;

-- create all the views we know
@attribute(cql:private)
CREATE PROCEDURE test_cql_create_all_views()
BEGIN
  CREATE VIEW shared_view AS
  SELECT *
    FROM foo;
  CREATE VIEW live_view AS
  SELECT *
    FROM foo;
  CREATE VIEW another_live_view AS
  SELECT *
    FROM table2;
END;

-- drop all the indices that are deleted or changing
@attribute(cql:private)
CREATE PROCEDURE test_cql_drop_all_indices()
BEGIN
  IF cql_facet_find(test_facets, 'shared_index_index_crc') != -8812401562048594220 THEN
    DROP INDEX IF EXISTS shared_index;
  END IF;
  DROP INDEX IF EXISTS gr1_index3;
  IF cql_facet_find(test_facets, 'not_shared_present_index_index_crc') != -4019575091142856767 THEN
    DROP INDEX IF EXISTS not_shared_present_index;
  END IF;
  DROP INDEX IF EXISTS index_going_away;
END;

-- create all the indices we need
@attribute(cql:private)
CREATE PROCEDURE test_cql_create_all_indices()
BEGIN
  IF cql_facet_find(test_facets, 'shared_index_index_crc') != -8812401562048594220 THEN
    CREATE INDEX shared_index ON foo (name, name_2);
    CALL test_cql_set_facet_version('shared_index_index_crc', -8812401562048594220);
  END IF;
  IF cql_facet_find(test_facets, 'not_shared_present_index_index_crc') != -4019575091142856767 THEN
    CREATE INDEX not_shared_present_index ON table2 (name1, name2);
    CALL test_cql_set_facet_version('not_shared_present_index_index_crc', -4019575091142856767);
  END IF;
END;

-- drop all the triggers we know
@attribute(cql:private)
CREATE PROCEDURE test_cql_drop_all_triggers()
BEGIN
  DROP TRIGGER IF EXISTS shared_trigger;
  DROP TRIGGER IF EXISTS not_shared_trigger;
  DROP TRIGGER IF EXISTS insert_trigger;
  DROP TRIGGER IF EXISTS old_trigger_was_deleted;
  DROP TRIGGER IF EXISTS trig_with_filter;
END;

-- create all the triggers we know
@attribute(cql:private)
CREATE PROCEDURE test_cql_create_all_triggers()
BEGIN
  CREATE TRIGGER shared_trigger
    BEFORE INSERT ON foo
  BEGIN
  SELECT 1;
  END;
  CREATE TRIGGER not_shared_trigger
    BEFORE INSERT ON foo
  BEGIN
  SELECT new.id;
  END;
  CREATE TRIGGER insert_trigger
    BEFORE INSERT ON foo
    FOR EACH ROW
    WHEN new.id > 7
  BEGIN
  SELECT new.id;
  END;
  CREATE TRIGGER trig_with_filter
    BEFORE INSERT ON foo
    WHEN filter_(new.id) = 3
  BEGIN
  DELETE FROM foo WHERE id = 77;
  END;
END;

-- recreate all the @recreate tables that might have changed
@attribute(cql:private)
CREATE PROCEDURE test_cql_recreate_tables()
BEGIN
  IF cql_facet_find(test_facets, 'complex_virtual_table_table_crc') != 5892669275896520096 THEN
    DROP TABLE IF EXISTS complex_virtual_table;
    CREATE VIRTUAL TABLE complex_virtual_table USING a_module (ARGUMENTS FOLLOWING) AS (
      id INTEGER @SENSITIVE,
      t TEXT
    );
    CALL test_cql_set_facet_version('complex_virtual_table_table_crc', 5892669275896520096);
  END IF;
  IF cql_facet_find(test_facets, 'epon_table_crc') != 7162631825357261735 THEN
    CREATE VIRTUAL TABLE @EPONYMOUS epon USING epon AS (
      id INTEGER @SENSITIVE,
      t TEXT
    );
    CALL test_cql_set_facet_version('epon_table_crc', 7162631825357261735);
  END IF;
  IF cql_facet_find(test_facets, 'a_virtual_table_table_crc') != -4813907186176555661 THEN
    DROP TABLE IF EXISTS a_virtual_table;
    CREATE VIRTUAL TABLE a_virtual_table USING a_module (this, that, the_other) AS (
      id INTEGER @SENSITIVE,
      t TEXT
    );
    CALL test_cql_set_facet_version('a_virtual_table_table_crc', -4813907186176555661);
  END IF;
  IF cql_facet_find(test_facets, 'table_to_recreate_table_crc') != 3137661388576624799 THEN
    DROP TABLE IF EXISTS table_to_recreate;
    CREATE TABLE table_to_recreate(
      id INTEGER NOT NULL,
      name TEXT
    );
    CALL test_cql_set_facet_version('table_to_recreate_table_crc', 3137661388576624799);
  END IF;
  IF cql_facet_find(test_facets, 'gr1_group_crc') != -5344641248211221614 THEN
    DROP TABLE IF EXISTS use_g1;
    DROP TABLE IF EXISTS g1;
    CREATE TABLE g1(
      id INTEGER PRIMARY KEY,
      name TEXT
    );
    CREATE INDEX gr1_index ON g1 (name);
    CREATE INDEX gr1_index2 ON g1 (name, id);
    CREATE TABLE use_g1(
      id INTEGER PRIMARY KEY REFERENCES g1 (id),
      name2 TEXT
    );

    -- recreate migration procedure required
    CALL RecreateGroup1Migration();

    CALL test_cql_set_facet_version('gr1_group_crc', -5344641248211221614);
  END IF;
  IF cql_facet_find(test_facets, 'my_group_group_crc') != 5282334304804635811 THEN
    DROP TABLE IF EXISTS grouped_table_3;
    DROP TABLE IF EXISTS grouped_table_2;
    DROP TABLE IF EXISTS grouped_table_1;
    CREATE TABLE grouped_table_1(
      id INTEGER NOT NULL,
      name TEXT
    );
    CREATE TABLE grouped_table_2(
      id INTEGER NOT NULL,
      name TEXT
    );
    CREATE TABLE grouped_table_3(
      id INTEGER NOT NULL,
      name TEXT
    );
    CALL test_cql_set_facet_version('my_group_group_crc', 5282334304804635811);
  END IF;
END;

CREATE PROCEDURE test_cql_install_temp_schema()
BEGIN
  CREATE TEMP TABLE this_table_appears_in_temp_section(
    temp_section_integer INTEGER
  );

  CREATE TEMP VIEW temp_view_in_temp_section AS
  SELECT *
    FROM foo;

  CREATE TEMP TRIGGER temp_trigger_in_temp_section
    BEFORE DELETE ON foo
    FOR EACH ROW
    WHEN old.id > 7
  BEGIN
  SELECT old.id;
  END;

END;
@attribute(cql:private)
CREATE PROCEDURE test_setup_facets()
BEGIN
  BEGIN TRY
    SET test_facets := cql_facets_new();
    DECLARE C CURSOR FOR SELECT * from test_cql_schema_facets;
    LOOP FETCH C
    BEGIN
      LET added := cql_facet_add(test_facets, C.facet, C.version);
    END;
  END TRY;
  BEGIN CATCH
   -- if table doesn't exist we just have empty facets, that's ok
  END CATCH;
END;

@attribute(cql:private)
CREATE PROC test_cql_drop_tables()
BEGIN
  DROP TABLE IF EXISTS deleted_virtual_table;
  DROP TABLE IF EXISTS added_table;
  DROP TABLE IF EXISTS delete_first;
  DROP TABLE IF EXISTS delete__second;
END;

@attribute(cql:private)
CREATE PROCEDURE test_perform_upgrade_steps()
BEGIN
  DECLARE schema_version LONG INTEGER NOT NULL;
    -- dropping all views --
    CALL test_cql_drop_all_views();

    -- dropping condemned or changing indices --
    CALL test_cql_drop_all_indices();

    -- dropping condemned or changing triggers --
    CALL test_cql_drop_all_triggers();

    ---- upgrade to schema version 3 ----

    CALL test_cql_get_version_crc(3, schema_version);
    IF schema_version != -4851321700834943637 THEN
      -- creating table added_table

      CREATE TABLE IF NOT EXISTS added_table(
        id INTEGER NOT NULL,
        name1 TEXT
      );

      CALL test_cql_set_version_crc(3, -4851321700834943637);
    END IF;

    ---- upgrade to schema version 4 ----

    CALL test_cql_get_version_crc(4, schema_version);
    IF schema_version != 2603445000966959897 THEN
      -- one time drop migrated_from_recreate

      CALL test_cql_one_time_drop('migrated_from_recreate', 4);

      -- creating table migrated_from_recreate

      CREATE TABLE IF NOT EXISTS migrated_from_recreate(
        id INTEGER,
        t TEXT
      );

      -- altering table foo to add column id2 INTEGER;

      IF NOT test_check_column_exists('foo', '*[( ]id2 INTEGER*') THEN 
        ALTER TABLE foo ADD COLUMN id2 INTEGER DEFAULT 12345;
      END IF;

      -- altering table added_table to add column name2 TEXT;

      IF NOT test_check_column_exists('added_table', '*[( ]name2 TEXT*') THEN 
        ALTER TABLE added_table ADD COLUMN name2 TEXT;
      END IF;

      -- logical delete of column rate_2 from foo; -- no ddl

      -- data migration procedures
      IF cql_facet_find(test_facets, 'CreateId2Proc') = -1 THEN
        CALL CreateId2Proc();
        CALL test_cql_set_facet_version('CreateId2Proc', 4);
      END IF;
      IF cql_facet_find(test_facets, 'DeleteRate2Proc') = -1 THEN
        CALL DeleteRate2Proc();
        CALL test_cql_set_facet_version('DeleteRate2Proc', 4);
      END IF;

      CALL test_cql_set_version_crc(4, 2603445000966959897);
    END IF;

    ---- upgrade to schema version 5 ----

    CALL test_cql_get_version_crc(5, schema_version);
    IF schema_version != -1443842544793398626 THEN
      -- altering table foo to add column name TEXT;

      IF NOT test_check_column_exists('foo', '*[( ]name TEXT*') THEN 
        ALTER TABLE foo ADD COLUMN name TEXT;
      END IF;

      -- logical delete of column rate from foo; -- no ddl

      -- ad hoc migration proc MyAdHocMigrationScript will run

      -- data migration procedures
      IF cql_facet_find(test_facets, 'MyAdHocMigrationScript') = -1 THEN
        CALL MyAdHocMigrationScript();
        CALL test_cql_set_facet_version('MyAdHocMigrationScript', 5);
      END IF;

      CALL test_cql_set_version_crc(5, -1443842544793398626);
    END IF;

    ---- upgrade to schema version 6 ----

    CALL test_cql_get_version_crc(6, schema_version);
    IF schema_version != -6908867606816505101 THEN
      -- altering table foo to add column name_2 TEXT;

      IF NOT test_check_column_exists('foo', '*[( ]name_2 TEXT*') THEN 
        ALTER TABLE foo ADD COLUMN name_2 TEXT;
      END IF;

      CALL test_cql_set_version_crc(6, -6908867606816505101);
    END IF;

    ---- upgrade to schema version 7 ----

    CALL test_cql_get_version_crc(7, schema_version);
    IF schema_version != 1426090987381496410 THEN
      -- creating table create_first

      CREATE TABLE IF NOT EXISTS create_first(
        id INTEGER PRIMARY KEY
      );

      -- creating table create__second

      CREATE TABLE IF NOT EXISTS create__second(
        id INTEGER REFERENCES create_first (id)
      );

      CALL test_cql_set_version_crc(7, 1426090987381496410);
    END IF;

    CALL test_cql_drop_tables();
    CALL test_cql_recreate_tables();
    CALL test_cql_create_all_views();
    CALL test_cql_create_all_indices();
    CALL test_cql_create_all_triggers();
    CALL test_cql_set_facet_version('cql_schema_version', 7);
    CALL test_cql_set_facet_version('cql_schema_crc', -3139502500644660849);
END;

@attribute(cql:private)
CREATE PROCEDURE test_perform_needed_upgrades()
BEGIN
  -- check for downgrade --
  IF cql_facet_find(test_facets, 'cql_schema_version') > 7 THEN
    SELECT 'downgrade detected' facet;
  ELSE
    -- save the current facets so we can diff them later --
    CALL test_save_cql_schema_facets();
    CALL test_perform_upgrade_steps();

    -- finally produce the list of differences
    SELECT T1.facet FROM
      test_cql_schema_facets T1
      LEFT OUTER JOIN test_cql_schema_facets_saved T2
        ON T1.facet = T2.facet
      WHERE T1.version is not T2.version;
  END IF;
END;

CREATE PROCEDURE test()
BEGIN
  DECLARE schema_crc LONG INTEGER NOT NULL;

  -- create schema facets information table --
  CALL test_create_cql_schema_facets_if_needed();

  -- fetch the last known schema crc, if it's different do the upgrade --
  CALL test_cql_get_facet_version('cql_schema_crc', schema_crc);

  IF schema_crc <> -3139502500644660849 THEN
    BEGIN TRY
      CALL test_setup_facets();
      CALL test_perform_needed_upgrades();
    END TRY;
    BEGIN CATCH
      CALL cql_facets_delete(test_facets);
      SET test_facets := 0;
      THROW;
    END CATCH;
    CALL cql_facets_delete(test_facets);
    SET test_facets := 0;
  ELSE
    -- some canonical result for no differences --
    SELECT 'no differences' facet;
  END IF;
  ---- install temp schema after upgrade is complete ----
  CALL test_cql_install_temp_schema();

END;

