
#include "out/cg_assembly_query_test_c.out.h"

#pragma clang diagnostic ignored "-Wbitwise-op-parentheses"
#pragma clang diagnostic ignored "-Wshift-op-parentheses"
#pragma clang diagnostic ignored "-Wlogical-not-parentheses"
extern CQL_WARN_UNUSED cql_code assembly_core(sqlite3 *_Nonnull _db_, sqlite3_stmt *_Nullable *_Nonnull _result_, cql_int32 id_, cql_string_ref _Nonnull name_);

// The statement ending at line XXXX
//

// The statement ending at line XXXX

/*
CREATE PROC assembly_core (id_ INTEGER NOT NULL, name_ TEXT NOT NULL)
BEGIN
  WITH
  assembly_core (x, y, z) AS (SELECT id, name, rate
    FROM bar
    WHERE id = id_),
  plugin_one (x, y, z, flag) AS (SELECT assembly_core.*, plugin_table.flag
    FROM assembly_core
    LEFT OUTER JOIN plugin_table ON plugin_table.name = assembly_core.y AND plugin_table.id = id_),
  plugin_two (x, y, z, flag, name) AS (SELECT plugin_one.*, CAST(NULL AS TEXT) AS name
    FROM plugin_one
  UNION ALL
  SELECT plugin_one.*, plugin_table.name
    FROM plugin_one
    INNER JOIN plugin_table ON plugin_table.name = name_)
  SELECT *
    FROM plugin_two;
END;
*/

static int32_t assembly_core_perf_index;

cql_string_literal(assembly_core_stored_procedure_name, "assembly_core");

typedef struct assembly_core_row {
  cql_int32 x;
  cql_nullable_int64 z;
  cql_nullable_bool flag;
  cql_string_ref _Nullable y;
  cql_string_ref _Nullable name;
} assembly_core_row;

extern cql_int32 assembly_core_get_x(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return cql_result_set_get_int32_col((cql_result_set_ref)result_set, row, 0);
}

extern cql_string_ref _Nullable assembly_core_get_y(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return cql_result_set_get_is_null_col((cql_result_set_ref)result_set, row, 1) ? NULL : cql_result_set_get_string_col((cql_result_set_ref)result_set, row, 1);
}

extern cql_bool assembly_core_get_z_is_null(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return cql_result_set_get_is_null_col((cql_result_set_ref)result_set, row, 2);
}

extern cql_int64 assembly_core_get_z_value(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return cql_result_set_get_int64_col((cql_result_set_ref)result_set, row, 2);
}

extern cql_bool __PRIVATE__assembly_core_get_flag_is_null(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return cql_result_set_get_is_null_col((cql_result_set_ref)result_set, row, 3);
}

extern cql_bool __PRIVATE__assembly_core_get_flag_value(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return cql_result_set_get_bool_col((cql_result_set_ref)result_set, row, 3);
}

extern cql_string_ref _Nullable __PRIVATE__assembly_core_get_name(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return cql_result_set_get_is_null_col((cql_result_set_ref)result_set, row, 4) ? NULL : cql_result_set_get_string_col((cql_result_set_ref)result_set, row, 4);
}

uint8_t assembly_core_data_types[assembly_core_data_types_count] = {
  CQL_DATA_TYPE_INT32 | CQL_DATA_TYPE_NOT_NULL, // x
  CQL_DATA_TYPE_STRING, // y
  CQL_DATA_TYPE_INT64, // z
  CQL_DATA_TYPE_BOOL, // flag
  CQL_DATA_TYPE_STRING, // name
};

#define assembly_core_refs_offset cql_offsetof(assembly_core_row, y) // count = 2

static cql_uint16 assembly_core_col_offsets[] = { 5,
  cql_offsetof(assembly_core_row, x),
  cql_offsetof(assembly_core_row, y),
  cql_offsetof(assembly_core_row, z),
  cql_offsetof(assembly_core_row, flag),
  cql_offsetof(assembly_core_row, name)
};

cql_int32 assembly_core_result_count(assembly_core_result_set_ref _Nonnull result_set) {
  return cql_result_set_get_count((cql_result_set_ref)result_set);
}

CQL_WARN_UNUSED cql_code assembly_core_fetch_results(sqlite3 *_Nonnull _db_, assembly_core_result_set_ref _Nullable *_Nonnull result_set, cql_int32 id_, cql_string_ref _Nonnull name_) {
  sqlite3_stmt *stmt = NULL;
  cql_profile_start(CRC_assembly_core, &assembly_core_perf_index);
  cql_code rc = assembly_core(_db_, &stmt, id_, name_);
  cql_fetch_info info = {
    .rc = rc,
    .db = _db_,
    .stmt = stmt,
    .data_types = assembly_core_data_types,
    .col_offsets = assembly_core_col_offsets,
    .refs_count = 2,
    .refs_offset = assembly_core_refs_offset,
    .rowsize = sizeof(assembly_core_row),
    .crc = CRC_assembly_core,
    .perf_index = &assembly_core_perf_index,
  };
  return cql_fetch_all_results(&info, (cql_result_set_ref *)result_set);
}

CQL_WARN_UNUSED cql_code assembly_core(sqlite3 *_Nonnull _db_, sqlite3_stmt *_Nullable *_Nonnull _result_, cql_int32 id_, cql_string_ref _Nonnull name_) {
  cql_code _rc_ = SQLITE_OK;
  *_result_ = NULL;
  _rc_ = cql_prepare(_db_, _result_,
    "WITH "
    "assembly_core (x, y, z) AS (SELECT id, name, rate "
      "FROM bar "
      "WHERE id = ?), "
    "plugin_one (x, y, z, flag) AS (SELECT assembly_core.x, assembly_core.y, assembly_core.z, plugin_table.flag "
      "FROM assembly_core "
      "LEFT OUTER JOIN plugin_table ON plugin_table.name = assembly_core.y AND plugin_table.id = ?), "
    "plugin_two (x, y, z, flag, name) AS (SELECT plugin_one.x, plugin_one.y, plugin_one.z, plugin_one.flag, NULL "
      "FROM plugin_one "
    "UNION ALL "
    "SELECT plugin_one.x, plugin_one.y, plugin_one.z, plugin_one.flag, plugin_table.name "
      "FROM plugin_one "
      "INNER JOIN plugin_table ON plugin_table.name = ?) "
    "SELECT x, y, z, flag, name "
      "FROM plugin_two");
  cql_multibind(&_rc_, _db_, _result_, 3,
                CQL_DATA_TYPE_NOT_NULL | CQL_DATA_TYPE_INT32, id_,
                CQL_DATA_TYPE_NOT_NULL | CQL_DATA_TYPE_INT32, id_,
                CQL_DATA_TYPE_NOT_NULL | CQL_DATA_TYPE_STRING, name_);
  if (_rc_ != SQLITE_OK) goto cql_cleanup;
  _rc_ = SQLITE_OK;

cql_cleanup:
  if (_rc_ == SQLITE_OK && !*_result_) _rc_ = SQLITE_ERROR;
  return _rc_;
}
