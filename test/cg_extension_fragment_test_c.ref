// (c) Facebook, Inc. and its affiliates. Confidential and proprietary.

// autogenerated by CQL

#include "out/cg_extension_fragment_test_c.out.h"

#pragma clang diagnostic ignored "-Wbitwise-op-parentheses"
#pragma clang diagnostic ignored "-Wshift-op-parentheses"
#pragma clang diagnostic ignored "-Wlogical-not-parentheses"

// The statement ending at line XXXX

/*
CREATE PROC extension_fragment_one (id_ INTEGER NOT NULL, name_ TEXT NOT NULL)
BEGIN
  WITH
  assembly_core (x, y, z) AS (SELECT 1, nullable("a"), nullable(3)),
  plugin_one (x, y, z, flag) AS (SELECT assembly_core.*, plugin_table.flag
    FROM assembly_core
    LEFT OUTER JOIN plugin_table ON plugin_table.name = assembly_core.y AND plugin_table.id = id_)
  SELECT *
    FROM plugin_one;
END;
*/

cql_int32 extension_fragment_one_get_x(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return assembly_core_get_x(result_set, row);
}

cql_string_ref _Nullable extension_fragment_one_get_y(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return assembly_core_get_y(result_set, row);
}

cql_bool extension_fragment_one_get_z_is_null(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return assembly_core_get_z_is_null(result_set, row);
}

cql_int64 extension_fragment_one_get_z_value(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return assembly_core_get_z_value(result_set, row);
}

cql_bool extension_fragment_one_get_flag_is_null(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return __PRIVATE__assembly_core_get_flag_is_null(result_set, row);
}

cql_bool extension_fragment_one_get_flag_value(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return __PRIVATE__assembly_core_get_flag_value(result_set, row);
}

cql_int32 extension_fragment_one_result_count(assembly_core_result_set_ref _Nonnull result_set) {
  return cql_result_set_get_count((cql_result_set_ref)result_set);
}

// The statement ending at line XXXX

/*
CREATE PROC extension_fragment_three (name_ TEXT NOT NULL)
BEGIN
  WITH
  assembly_non_core (a, b, c) AS (SELECT "a", nullable("x"), nullable(1)),
  plugin_three (a, b, c, d) AS (SELECT assembly_non_core.*, plugin_table.timestamp_ms
    FROM assembly_non_core
    LEFT OUTER JOIN plugin_table ON plugin_table.name = assembly_non_core.b AND plugin_table.name = name_)
  SELECT *
    FROM plugin_three;
END;
*/

cql_string_ref _Nonnull extension_fragment_three_get_a(assembly_non_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return assembly_non_core_get_a(result_set, row);
}

cql_string_ref _Nullable extension_fragment_three_get_b(assembly_non_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return assembly_non_core_get_b(result_set, row);
}

cql_bool extension_fragment_three_get_c_is_null(assembly_non_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return assembly_non_core_get_c_is_null(result_set, row);
}

cql_int32 extension_fragment_three_get_c_value(assembly_non_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return assembly_non_core_get_c_value(result_set, row);
}

cql_bool extension_fragment_three_get_d_is_null(assembly_non_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return __PRIVATE__assembly_non_core_get_d_is_null(result_set, row);
}

cql_int64 extension_fragment_three_get_d_value(assembly_non_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return __PRIVATE__assembly_non_core_get_d_value(result_set, row);
}

cql_int32 extension_fragment_three_result_count(assembly_non_core_result_set_ref _Nonnull result_set) {
  return cql_result_set_get_count((cql_result_set_ref)result_set);
}

// The statement ending at line XXXX

/*
CREATE PROC extension_fragment_two (id_ INTEGER NOT NULL, name_ TEXT NOT NULL)
BEGIN
  WITH
  assembly_core (x, y, z) AS (SELECT 1, nullable("a"), nullable(3)),
  plugin_two (x, y, z, name) AS (SELECT assembly_core.*, CAST(NULL AS TEXT) AS name
    FROM assembly_core
  UNION ALL
  SELECT assembly_core.*, plugin_table.name
    FROM assembly_core
    INNER JOIN plugin_table ON plugin_table.name = name_)
  SELECT *
    FROM plugin_two;
END;
*/

cql_int32 extension_fragment_two_get_x(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return assembly_core_get_x(result_set, row);
}

cql_string_ref _Nullable extension_fragment_two_get_y(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return assembly_core_get_y(result_set, row);
}

cql_bool extension_fragment_two_get_z_is_null(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return assembly_core_get_z_is_null(result_set, row);
}

cql_int64 extension_fragment_two_get_z_value(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return assembly_core_get_z_value(result_set, row);
}

cql_string_ref _Nullable extension_fragment_two_get_name(assembly_core_result_set_ref _Nonnull result_set, cql_int32 row) {
  return __PRIVATE__assembly_core_get_name(result_set, row);
}

cql_int32 extension_fragment_two_result_count(assembly_core_result_set_ref _Nonnull result_set) {
  return cql_result_set_get_count((cql_result_set_ref)result_set);
}
